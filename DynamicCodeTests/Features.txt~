
TODO:

Put these into a new spreadsheet with columns for time estimates/actuals, dates, times worked on each task, etc

Dynamic

Dynamic.UI
	D- ProjectDialog usings, ..? Added 1/7/13
	- Rewrite DynamicCodePage using same methods/classes as CodeWindow.OnExecute - Added 1/7/13
	- Recent Files/Projects - Added 5/7/13
	D- Remove Project/Load menuitem, just detect file name/extension/type/(mimetype?) in OnFileOpen and open appropriately - Added 5/7/13

Dynamic.Project
	D- Files in Project, references (assemblies)
	D- Load/Save Project
	D- Immediate Code History Load/Save
	- Change Usings from string to string[], avoid new line characters being trimmed into a single space char - Added 1/7/13
	- Add confirm overwrite if project file already exists - Added 5/7/13
		- Add project file directory string member to Project class (and ProjectDialog) - Added 5/7/13
	- Add show project preferences dialog if (autosaving) for the first time and user has not changed values from default - Added 5/7/13
	- Ensure that project preferences are saved every time the user changes them (and approves with OK/Apply button, not Cancel) - Added 5/7/13

JGL.Heirarchy
	- Mesh derived types like Box, Cube, Sphere(how to do manually if cant auto generate?), Square (in 3d space),
	Grid (2D Rectangle with specified number of vertices per dimension - could derive a Terrain type from here)
	- Mesh construction from multiple meshes, merges vertex data from each input mesh Added 5/7/13

JGL.Heiararchy.Scene
	- Static member called All that contains all Scene derived instances Added 5/7/13

JGL
	- Some kind of performance/timing capabilities? Added 5/7/13

JGL.Resource - Added 6/7/13
	- Resource abstract base class
		- Texture
		- AudioSample
		- File ??
			- e.g. 3d models, sounds, maps, xml, binary, whatever
			- could hold the original resource (or enough of it as required) to be able to quickly create instantiations (Entity derived) for insertion into the heirarchy.
				- Create multiple instantiations quickly, whenever, wherever in whatever heirarchy
				- A JGL.Resource.File class may (!) be a good starting point for some kind of standardisation for loading Entities/other resources from files
					- Maybe not Resource-derived, maybe jsut a JGL.File class for same purpose?
