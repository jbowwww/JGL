using System;
using System.IO;
using Gtk;

namespace Dynamic.UI
{
	/// <summary>
	/// File system dialog.
	/// </summary>
	public class FileSystemDialog
	{
		/// <summary>
		/// Gets or sets the gtk dialog.
		/// </summary>
		/// <value>
		/// The gtk dialog.
		/// </value>
		public Dialog GtkDialog { get; private set; }

		/// <summary>
		/// The sw filesystem.
		/// </summary>
		[Glade.Widget]
		ScrolledWindow swFileSystem;

		/// <summary>
		/// A <see cref="Gtk.NodeView"/> displaying an <see cref="JGL.Heirarchy.Entity"/> heirarchy
		/// </summary>
		protected NodeView tvFileSystem;

		/// <summary>
		/// The <see cref="Gtk.NodeStore"/> to back <see cref="DynamicCodeApplication.nvWindow"/>
		/// </summary>
		protected NodeStore storeFileSystem;		// todo: model could store strongly typed values representing entities?

		/// <summary>
		/// Initializes a new instance of the <see cref="UI.FileSystemDialog"/> class.
		/// </summary>
		public FileSystemDialog()
		{
			Glade.XML gxml = new Glade.XML("/home/jk/Code/JGL/DynamicCodeTests/UI/Dynamic.glade", "FileSystemDialog", null);
			gxml.Autoconnect(this);																				// load & autoconnect glade UI for a CodeWindow

			GtkDialog = swFileSystem.Toplevel as Gtk.Dialog;

			storeFileSystem = new NodeStore(typeof(FileSystemNode));		// create a NodeStore using Entity wrapper class
			tvFileSystem = new NodeView(storeFileSystem);									// create a NodeView and add to container ScrolledWindow
			swFileSystem.Add(tvFileSystem);
			tvFileSystem.AppendColumn(new TreeViewColumn("Name", new CellRendererText(), "text", 0) { Resizable = true });
			tvFileSystem.AppendColumn("Size", new CellRendererText(), "text", 1);
			tvFileSystem.AppendColumn("Modified", new CellRendererText(), "text", 2);
			tvFileSystem.Columns[0].Resizable = true;											// Add columns to NodeView and configure
			tvFileSystem.Columns[1].Resizable = true;											// Add columns to NodeView and configure
			tvFileSystem.Columns[2].Resizable = true;											// Add columns to NodeView and configure
			PopulateHeirarchy();																					// Populate the NodeView with the Entity heirarchy
		}

		/// <summary>
		/// Populates the <see cref="CodeWindow.tvHeirarchy"/> <see cref="Gtk.NodeView"/> with
		/// the <see cref="JGL.Heirarchy.Entity"/> heirarchy
		/// </summary>
		public void PopulateHeirarchy()
		{
			storeFileSystem.Clear();
//			foreach (DriveInfo di in DriveInfo.GetDrives())
//			{
//				if (di.Name != "/sys" && di.Name != "/boot")
			foreach (string dn in Directory.GetDirectories("/home/jk/Code/JGL"))
			{
				DirectoryInfo di = new DirectoryInfo(dn);
				PopulateHeirarchy(new FileSystemNode() { Path = dn, /* di.RootDirectory.FullName, */ Name = di.Name, Size = 0, ModifyTime = di.LastWriteTime });
			}
			tvFileSystem.ShowAll();
//			}
//				if (JGLApp.RootContext != null)
//				{
//					foreach (Entity e in JGLApp.RootContext)
//						PopulateHeirarchy(e);
//				}
//			tvHeirarchy.ShowAll();
		}

		/// <summary>
		/// Populates the heirarchy rooted at <paramref name="ec"/>, as a subtree of node <paramref name="ti"/>
		/// </summary>
		/// <param name='entity'><see cref="JGL.Heirarchy.Entity"> to add.</param>
		/// <param name='tnParent'><see cref="Gtk.TreeNode"/> that is to hold the child tree nodes representing the subheirarchy of <paramref name="ec"/></param>
		private void PopulateHeirarchy(FileSystemNode fsNode, TreeNode tnParent = null)
		{
			if (tnParent == null)
				storeFileSystem.AddNode(fsNode);
			else
				tnParent.AddChild(fsNode);
			if (Directory.Exists(fsNode.Path))
			{
				try
				{
					foreach (string dn in Directory.GetDirectories(fsNode.Path))
					{
						try
						{
							DirectoryInfo di = new DirectoryInfo(dn);
							PopulateHeirarchy(new FileSystemNode() { Path = di.FullName, Name = di.Name, Size = 0L, ModifyTime = di.LastWriteTime }, fsNode);
						}
						catch (IOException ex)
						{
							;
						}
					}
					foreach (string fn in Directory.GetFiles(fsNode.Path))
					{
						FileInfo fi = new FileInfo(fn);
						PopulateHeirarchy(new FileSystemNode() { Path = fn, /* di.RootDirectory.FullName, */ Name = fi.Name, Size = fi.Length, ModifyTime = fi.LastWriteTime }, fsNode);
					}
				}
				catch (IOException ex)
				{
					;
				}
			}
		}
	}
}

