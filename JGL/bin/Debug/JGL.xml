<?xml version="1.0"?>
<doc>
    <assembly>
        <name>/home/jk/Code/JGL/JGL/bin/Debug/JGL</name>
    </assembly>
    <members>
        <member name="F:JGL.Extensions.MemberInfo_Ext.Trace">
            <summary>
            Tracing
            </summary>
        </member>
        <member name="F:JGL.Extensions.Type_Ext.Trace">
            <summary>
            Tracing
            </summary>
        </member>
        <member name="M:JGL.Extensions.Type_Ext.IsSimple(System.Type)">
            <summary>
            Determines whether the given type is simple (i.e. a primitive, a string, datetime or timespan)
            </summary>
            <param name="T">The type to test</param>
        </member>
        <!--FIXME: Invalid documentation markup was found for member M:JGL.Extensions.Type_Ext.GetBaseTypes(System.Type,System.Func{System.Type,System.Boolean})-->
        <member name="M:JGL.Extensions.Type_Ext.IsTypeOf(System.Type,System.Type)">
            <summary>
            Determines whether this type is equal to or a subclass of <paramref name="typeOf" /></summary>
            <returns>
                <c>true</c> if <paramref name="T" /> is a type of <paramref name="typeOf" />; otherwise, <c>false</c></returns>
            <param name="T">This <see cref="T:System.Type" /> instance</param>
            <param name="typeOf">A <see cref="!:typeOf" /> to test for</param>
        </member>
        <!--FIXME: Invalid documentation markup was found for member M:JGL.Extensions.Type_Ext.HasElementValueType(System.Type)-->
        <!--FIXME: Invalid documentation markup was found for member M:JGL.Extensions.Type_Ext.GetElementValueType(System.Type,System.Boolean@)-->
        <member name="T:JGL.Heirarchy.Entity">
            <summary>
            Top level base class for heirarchy entities
            </summary>
            <remarks>
            TODO: Support concurrency? e.g. any changes or initial lazy load of default Name/ID, Parent setter,
            should all lock the values they are reading/writing, AND ALSO, should lock around potential Entity
            enumeration accessed in through Parent context's (don't change collections while enumerating)
            Think about it, first, then code
            </remarks>
        </member>
        <member name="M:JGL.Heirarchy.Entity.#ctor(System.String)">
            <summary>
            Initializes a new <see cref="T:JGL.Heirarchy.Entity" /> instance
            <see cref="!:JGL.Heirarchy.Context.Entities" /></summary>
            <param name="name">Entity Name</param>
        </member>
        <member name="F:JGL.Heirarchy.Entity.Trace">
            <summary>
            Tracing
            </summary>
        </member>
        <member name="P:JGL.Heirarchy.Entity.Name">
            <summary>
            Gets or sets the <see cref="T:JGL.Heirarchy.Entity" /> name
            </summary>
        </member>
        <member name="P:JGL.Heirarchy.Entity.Id">
            <summary>
            Id of this entity is the concatenation of the parent's Id, a period, and the entity name, or
            if this entity has no parent, Id is equal to the name
            </summary>
        </member>
        <member name="P:JGL.Heirarchy.Entity.Parent">
            <summary>
            Parent entity contains this entity
            </summary>
        </member>
        <member name="P:JGL.Heirarchy.Entity.Owner">
            <summary>
            Owner is the top level entity in a heirarchy, and has no parent
            </summary>
        </member>
        <member name="P:JGL.Heirarchy.Entity.IsAutoNamed">
            <summary>
            Gets a value indicating whether this Entity has been autonamed (either a name was never set at construction,
            or the name has deliberately been set to <c>null</c> to cause an auto name to be generated as required, when
            adding to an <see cref="!:JGL.Heirarchy.Context" />)
            </summary>
        </member>
        <member name="P:JGL.Heirarchy.Entity.IsContext">
            <summary>
            Gets a value indicating whether this <see cref="T:JGL.Heirarchy.Entity" /> is an <see cref="T:JGL.Heirarchy.EntityContext" /></summary>
        </member>
        <member name="P:JGL.Heirarchy.Entity.IsRootContext">
            <summary>
            Gets a value indicating whether this <see cref="T:JGL.Heirarchy.Entity" /> is an <see cref="T:JGL.Heirarchy.EntityRootContext" /></summary>
        </member>
        <member name="M:JGL.Heirarchy.Entity.GetRelativeId(JGL.Heirarchy.EntityContext)">
            <summary>
            Gets this <see cref="T:JGL.Heirarchy.Entity" />'s ID relative to the given <see cref="T:JGL.Heirarchy.EntityContext" />,
            which should be an ancestor of this <see cref="T:JGL.Heirarchy.Entity" /> in the heirarchy.
            </summary>
            <returns>The ID of this <see cref="T:JGL.Heirarchy.Entity" /> relative to <paramref name="reference" /></returns>
            <param name="reference">
                <see cref="!:JGL.Heirarchy.Context" /> that the returned relative ID should be in relation to</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="reference" /> is not an ancestor of this <see cref="T:JGL.Heirarchy.Entity" /></exception>
        </member>
        <member name="M:JGL.Heirarchy.Entity.GenerateAutoName">
            <summary>
            Generates a base name for use when auto-naming <see cref="T:JGL.Heirarchy.Entity" />s (ie when <see cref="P:JGL.Heirarchy.Entity.Name" />
            has not been explicitly set, or it has been set to null
            </summary>
            <returns>
            The name.
            </returns>
        </member>
        <member name="T:JGL.Heirarchy.Scene">
            <summary>
            Represents a scene graph, i.e. the top level <see cref="!:JGL.Heirarchy.Context" /> containing
            a heirarchy of <see cref="T:JGL.Heirarchy.Entity" />s
            </summary>
        </member>
        <member name="M:JGL.Heirarchy.Scene.#ctor(JGL.Heirarchy.Entity[])">
            <summary>
            Construct a new <see cref="T:JGL.Heirarchy.Scene" /></summary>
            <param name="name">
                <see cref="P:JGL.Heirarchy.Entity.Name" /> of the new scene</param>
            <summary>
            Initializes a new instance of the <see cref="T:JGL.Heirarchy.Scene" /> class.
            </summary>
            <param name="children">Zero or more child entities to add to this <see cref="!:JGL.Heirarchy.Context" /></param>
        </member>
        <member name="M:JGL.Heirarchy.Scene.#ctor(System.String,JGL.Heirarchy.Entity[])">
            <summary>
            Initializes a new instance of the <see cref="T:JGL.Heirarchy.Scene" /> class.
            </summary>
            <param name="children">Zero or more child entities to add to this <see cref="!:JGL.Heirarchy.Context" /></param>
            <param name="name">Entity name</param>
        </member>
        <member name="F:JGL.Heirarchy.Scene.Trace">
            <summary>
            Tracing
            </summary>
        </member>
        <member name="T:JGL.Heirarchy.Sector">
            <summary>
            Represents a subspace of a <see cref="T:JGL.Heirarchy.Scene" />, and contains child <see cref="T:JGL.Heirarchy.Entity" />s
            (such as <see cref="!:JGL.Heirarchy.MeshObject" />s)
            </summary>
        </member>
        <member name="M:JGL.Heirarchy.Sector.#ctor(JGL.Heirarchy.Entity[])">
            <summary>
            Initializes a new <see cref="T:JGL.Heirarchy.Sector" /> instance, optionally containing supplied
            child <see cref="T:JGL.Heirarchy.Entity" />s.
            </summary>
            <param name="children">Child entities to add to this <see cref="!:JGL.Heirarchy.Context" /></param>
        </member>
        <member name="F:JGL.Heirarchy.Sector.Trace">
            <summary>
            Tracing
            </summary>
        </member>
        <member name="P:JGL.Heirarchy.Sector.Objects">
            <summary>
            Gets child objects
            </summary>
        </member>
        <member name="P:JGL.Heirarchy.Sector.Position">
            <summary>
            Position in 3D space
            </summary>
            <remarks>IPositionable implementation</remarks>
        </member>
        <member name="P:JGL.Heirarchy.Sector.Rotation">
            <summary>
            Rotation in 3D space (X,Y,Z each describe number of degrees rotation around the X/Y/Z unit vector)
            </summary>
            <remarks>IRotatable implementation</remarks>
        </member>
        <member name="T:JGL.Heirarchy.IRenderable">
            <summary>
            Implemented by renderable instances in a <see cref="T:JGL.Heirarchy.Scene" /></summary>
        </member>
        <member name="M:JGL.Heirarchy.IRenderable.Render(JGL.Graphics.RenderArgs)">
            <summary>
            Render the specified currentlyUnused.
            </summary>
            <param name="currentlyUnused">Will probably need to pass some sort of state and/or context</param>
        </member>
        <member name="T:JGL.Heirarchy.Mesh">
            <summary>
            Represents a 3D mesh made up of a vertex array, and optionally normal and texture coordinate arrays
            If using texture coordinates the <see cref="!:JGL.Heirarchy.Mesh.Texture" /> property should also be set
            </summary>
        </member>
        <member name="M:JGL.Heirarchy.Mesh.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:JGL.Heirarchy.Mesh" /> class.
            </summary>
            <param name="name">
            Name.
            </param>
        </member>
        <member name="M:JGL.Heirarchy.Mesh.#ctor(System.String,JGL.Geometry.VertexData,System.Collections.Generic.IList{JGL.Geometry.TriangleFace})">
            <summary>
            Initializes a new instance of the <see cref="T:JGL.Heirarchy.Mesh" /> class.
            </summary>
            <param name="vertexData">
            VertexData.
            </param>
        </member>
        <member name="M:JGL.Heirarchy.Mesh.#ctor(System.String,JGL.Geometry.VertexData,System.Collections.Generic.IEnumerable{JGL.Geometry.TriangleFace})">
            <summary>
            Initializes a new instance of the <see cref="T:JGL.Heirarchy.Mesh" /> class.
            </summary>
            <param name="name">
            Name.
            </param>
            <param name="vertexData">
            VertexData.
            </param>
            <param name="triangles">
            Triangles.
            </param>
        </member>
        <member name="M:JGL.Heirarchy.Mesh.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:JGL.Heirarchy.Mesh" /> class from an .OBJ (lightwave) file
            </summary>
            <param name="filename">Filename</param>
            <param name="dummy">Dummy</param>
        </member>
        <member name="F:JGL.Heirarchy.Mesh.Trace">
            <summary>
            Tracing
            </summary>
        </member>
        <!--FIXME: Invalid documentation markup was found for member F:JGL.Heirarchy.Mesh.VertexData-->
        <member name="F:JGL.Heirarchy.Mesh.Material">
            <summary>
            The material.
            </summary>
        </member>
        <member name="F:JGL.Heirarchy.Mesh.Triangles">
            <summary>
            The triangles.
            </summary>
        </member>
        <member name="F:JGL.Heirarchy.Mesh.TwoSided">
            <summary>
            Gets the triangles as an array.
            </summary>
            <remarks>
            	-	TODO: Look into (think about, test) if using this would speed up looping through triangles when rendering?
            		-	Any benefit probably limited/negated/overshadowed by having to copy elements to a new array each time
            </remarks>
            <summary>
            Indicate if mesh faces should be drawn one or two sided
            </summary>
        </member>
        <member name="M:JGL.Heirarchy.Mesh.Texturise``1(JGL.Heirarchy.TexturiseMethod{``0})">
            <summary>
            Texturise the specified texturiseMethod.
            </summary>
            <param name="texturiseMethod">Texturise method</param>
        </member>
        <member name="M:JGL.Heirarchy.Mesh.Render(JGL.Graphics.RenderArgs)">
            <summary>
            Render <see cref="T:JGL.Heirarchy.Mesh" /></summary>
            <param name="args">Render arguments</param>
            <remarks>IRenderable implementation</remarks>
        </member>
        <member name="M:JGL.Heirarchy.Mesh.RenderFaces">
            <summary>
            Renders triangles, not using a texture
            </summary>
            <remarks>
            	-	Assumes <see cref="F:JGL.Heirarchy.Mesh.Triangles" /> != <c>null</c></remarks>
        </member>
        <member name="M:JGL.Heirarchy.Mesh.RenderFacesTextured">
            <summary>
            Renders triangles, using <see cref="!:Mesh.Material.Texture" /></summary>
            <remarks>
            	-	Assumes <see cref="F:JGL.Heirarchy.Mesh.Triangles" /> != <c>null</c> and in each <see cref="!:Triangle" />, assumes
            		<see cref="!:Triangle.V" /> != <c>null</c>, <see cref="!:Triangle.N" /> != <c>null</c> and <see cref="!:Triangle.T" /> != <c>null</c></remarks>
        </member>
        <member name="M:JGL.Heirarchy.Mesh.LoadObjFile(System.IO.Stream)">
            <summary>
            Loads the object file.
            </summary>
            <param name="fs">Stream containing lightwave .OBJ format data</param>
        </member>
        <member name="F:JGL.Geometry.TexCoord.Trace">
            <summary>
            Tracing
            </summary>
        </member>
        <member name="T:JGL.OpenGL.GLContextualData`2">
            <summary>
            GL contextual.
            </summary>
        </member>
        <member name="M:JGL.OpenGL.GLContextualData`2.#ctor(GLContextualDataCreationHandler,`0)">
            <summary>
            Initializes a new instance of the <see cref="!:JGL.GL.GLContextualData" /> class.
            </summary>
        </member>
        <member name="T:JGL.Heirarchy.Camera">
            <summary>
            Camera entity.
            </summary>
        </member>
        <member name="M:JGL.Heirarchy.Camera.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:JGL.Heirarchy.Camera" /> class.
            </summary>
            <param name="name">Camera's entity name</param>
        </member>
        <member name="M:JGL.Heirarchy.Camera.Render(JGL.Graphics.RenderArgs)">
            <summary>
            Render owner <see cref="T:JGL.Heirarchy.Scene" /> using the perspective of this <see cref="T:JGL.Heirarchy.Camera" />,
            </summary>
            <param name="renderArgs">Render arguments.</param>
            <remarks>IRenderable implementation</remarks>
        </member>
        <member name="T:JGL.Heirarchy.IPositionable">
            <summary>
            I positionable.
            </summary>
        </member>
        <member name="P:JGL.Heirarchy.IPositionable.Position">
            <summary>
            Position in 3D space
            </summary>
        </member>
        <member name="T:JGL.Heirarchy.IRotatable">
            <summary>
            I rotatable.
            </summary>
        </member>
        <member name="P:JGL.Heirarchy.IRotatable.Rotation">
            <summary>
            Rotation in 3D space (X,Y,Z each describe number of degrees rotation around the X/Y/Z unit vector)
            </summary>
        </member>
        <member name="P:JGL.Heirarchy.IRotatable.Orientation">
            <summary>
            Gets or sets the object orientation (linked to <see cref="P:JGL.Heirarchy.Object.Rotation" /></summary>
        </member>
        <member name="M:JGL.Heirarchy.SimpleObject.#ctor">
            <summary>
            Position in 3D space
            </summary>
            <remarks>IPositionable implementation</remarks>
            <summary>
            Rotation in 3D space (X,Y,Z each describe number of degrees rotation around the X/Y/Z unit vector)
            </summary>
            <remarks>IRotatable implementation</remarks>
            <summary>
            Initializes a new instance of the <see cref="T:JGL.Heirarchy.SimpleObject" /> class.
            </summary>
        </member>
        <member name="M:JGL.Heirarchy.SimpleObject.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:JGL.Heirarchy.SimpleObject" /> class.
            </summary>
            <param name="name">Object name</param>
        </member>
        <member name="M:JGL.Heirarchy.SimpleObject.#ctor(System.String,JGL.Heirarchy.SimpleObject.RenderFunc)">
            <summary>
            Initializes a new instance of the <see cref="T:JGL.Heirarchy.SimpleObject" /> class.
            </summary>
            <param name="name">Object name</param>
        </member>
        <member name="M:JGL.Heirarchy.SimpleObject.#ctor(JGL.Heirarchy.SimpleObject.RenderFunc)">
            <summary>
            Initializes a new instance of the <see cref="T:JGL.Heirarchy.SimpleObject" /> class.
            </summary>
            <param name="name">Object name</param>
        </member>
        <member name="F:JGL.Heirarchy.SimpleObject.Trace">
            <summary>
            Tracing
            </summary>
        </member>
        <member name="M:JGL.Heirarchy.Light.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:JGL.Heirarchy.Light" /> class.
            </summary>
        </member>
        <member name="F:JGL.Heirarchy.Light.Trace">
            <summary>
            Tracing
            </summary>
        </member>
        <member name="F:JGL.Heirarchy.Light.Enabled">
            <summary>
            Enable/disable the light
            </summary>
        </member>
        <member name="F:JGL.Heirarchy.Light.Ambient">
            <summary>
            Ambient light color.
            </summary>
        </member>
        <member name="F:JGL.Heirarchy.Light.Diffuse">
            <summary>
            Ambient light color.
            </summary>
        </member>
        <member name="F:JGL.Heirarchy.Light.Specular">
            <summary>
            Ambient light color.
            </summary>
        </member>
        <member name="P:JGL.Heirarchy.Light.Position">
            <summary>
            Light's position
            </summary>
            <remarks>
                <see cref="T:JGL.Heirarchy.IPositionable" /> implementation</remarks>
        </member>
        <member name="P:JGL.Heirarchy.Light.Rotation">
            <summary>
            Light's rotation
            </summary>
            <remarks>
                <see cref="T:JGL.Heirarchy.IRotatable" /> implementation</remarks>
        </member>
        <member name="P:JGL.Heirarchy.Light.Orientation">
            <summary>
            Gets or sets the object orientation (linked to <see cref="P:JGL.Heirarchy.Object.Rotation" /></summary>
        </member>
        <member name="M:JGL.Heirarchy.Light.Render(JGL.Graphics.RenderArgs)">
            <summary>
            Renders the light
            </summary>
            <param name="renderArgs">Render arguments.</param>
            <remarks>
                <see cref="T:JGL.Heirarchy.IRenderable" /> implementation</remarks>
        </member>
        <member name="T:JGL.Debugging.Debug">
            <summary>
            Wrapper class for <see cref="T:System.Diagnostics.Debug" />.
            </summary>
            <remarks>
            	-	TODO: Check all references to this class and it's members, and see if those references
            		can be changed to use <see cref="T:JGL.Debugging.AutoTraceSource" /> members, for example, <see cref="!:AutoTraceSource.Debug" />
            		-	This class might then be obsolete
            </remarks>
        </member>
        <member name="F:JGL.Debugging.Debug.Trace">
            <summary>
            Tracing
            </summary>
        </member>
        <member name="M:JGL.Debugging.Debug.Assert(System.Boolean)">
            <summary>
            Assert the specified condition.
            </summary>
            <param name="condition">Condition</param>
        </member>
        <member name="T:JGL.Debugging.AsyncTraceListener">
            <summary>
            A trace listener that queues data it receives into a static (shared among all <see cref="T:JGL.Debugging.AsyncTraceListener" />s)
            queue until the background thread (see <see cref="!:RunThread" />) formats it for output and writes it to the <see cref="T:System.IO.Stream" />
            associated with the <see cref="T:JGL.Debugging.AsyncTraceListener" /> the message belongs too
            </summary>
        </member>
        <member name="M:JGL.Debugging.AsyncTraceListener.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:JGL.Debugging.AsyncTraceListener" /> class.
            </summary>
            <param name="name">Name</param>
        </member>
        <member name="F:JGL.Debugging.AsyncTraceListener.ThreadWaitTime">
            <summary>
            Time (in milliseconds) for <see cref="!:AsyncTraceListener.RunThread" /> to sleep for,
            after writing all <see cref="T:JGL.Debugging.LogMessage" />s in queue
            </summary>
        </member>
        <member name="F:JGL.Debugging.AsyncTraceListener.Trace">
            <summary>
            Tracing
            </summary>
        </member>
        <member name="F:JGL.Debugging.AsyncTraceListener._namedListeners">
            <summary>
                <see cref="T:JGL.Debugging.AsyncTraceListener" />s, keyed by name
            </summary>
        </member>
        <member name="F:JGL.Debugging.AsyncTraceListener._stop">
            <summary>
            Indicates that this <see cref="T:JGL.Debugging.AsyncTraceListener" /> should be stopped
            </summary>
        </member>
        <member name="F:JGL.Debugging.AsyncTraceListener.Stream">
            <summary>
            The stream that this <see cref="T:JGL.Debugging.AsyncTraceListener" /> writes to
            </summary>
        </member>
        <member name="M:JGL.Debugging.AsyncTraceListener.GetOrCreate(System.String,System.Type)">
            <summary>
            Gets or create a <see cref="T:JGL.Debugging.AsyncTraceListener" /></summary>
            <returns>
            The retrieved or newly created <see cref="T:JGL.Debugging.AsyncTraceListener" /></returns>
            <param name="name">Name of listener to get/create</param>
            <param name="type">Type of listener to create</param>
        </member>
        <member name="M:JGL.Debugging.AsyncTraceListener.FormatMessage(System.String)">
            <summary>
            Format message delegate method. Formats a <see cref="T:JGL.Debugging.LogMessage" /> instance into <see cref="T:System.Byte[]" /> data to be
            written to the output <see cref="T:System.IO.Stream" />. Override to customise behaviour.
            </summary>
        </member>
        <member name="M:JGL.Debugging.AsyncTraceListener.Dispose(System.Boolean)">
            <summary>
            Dispose of this <see cref="T:JGL.Debugging.AsyncTraceListener" /> (calls <see cref="!:Stop" />)
            </summary>
            <param name="disposing">Disposing</param>
        </member>
        <member name="M:JGL.Debugging.AsyncTraceListener.EnsureOpen">
            <summary>
            Ensures <see cref="T:System.IO.Stream" /> is a valid open stream
            </summary>
        </member>
        <member name="M:JGL.Debugging.AsyncTraceListener.OpenStream">
            <summary>
            The open stream method opens the output stream when required by the background thread. Override to customise behaviour.
            </summary>
        </member>
        <member name="M:JGL.Debugging.AsyncTraceListener.Flush">
            <summary>
            Called by <see cref="T:System.Diagnostics.TraceSource" /> methods to specify a message to log
            </summary>
            <param name="eventCache">Event cache</param>
            <param name="source">Source</param>
            <param name="eventType">Event type</param>
            <param name="id">Identifier</param>
            <param name="data">Data</param>
            <summary>
            Base implementation throws exception if <paramref name="data" /> is <c>null</c> or not of type <see cref="T:JGL.Debugging.LogMessage" /></summary>
            <param name="eventCache">
            </param>
            <param name="source">
            </param>
            <param name="eventType">
            </param>
            <param name="id">
            </param>
            <param name="data">A <see cref="T:JGL.Debugging.LogMessage" /> instance</param>
            <summary>
            Flush this instance.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Is thrown when an operation cannot be performed.
            </exception>
        </member>
        <member name="M:JGL.Debugging.AsyncTraceListener.Write(System.String)">
            <summary>
            Write the specified message.
            </summary>
            <param name="message">
            Message.
            </param>
            <exception cref="T:System.InvalidOperationException">
            Is thrown when an operation cannot be performed.
            </exception>
            <remarks>Only implemented because base class marks it as abstract - due to my <see cref="M:System.Diagnostics.TraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)" /> override this should never execute</remarks>
        </member>
        <member name="M:JGL.Debugging.AsyncTraceListener.WriteLine(System.String)">
            <summary>
            Write the specified message.
            </summary>
            <param name="message">
            Message.
            </param>
            <exception cref="T:System.InvalidOperationException">
            Is thrown when an operation cannot be performed.
            </exception>
            <remarks>Only implemented because base class marks it as abstract - due to my <see cref="M:System.Diagnostics.TraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)" /> override this should never execute</remarks>
        </member>
        <member name="T:JGL.Debugging.AutoTraceSource">
            <summary>
            Designed to simplify use of <see cref="T:System.Diagnostics.TraceSource" /></summary>
        </member>
        <member name="M:JGL.Debugging.AutoTraceSource.#ctor(System.String,System.Diagnostics.TraceListener[])">
            <summary>
            Initializes a new instance of the <see cref="T:JGL.Debugging.AutoTraceSource" /> class, using the executing module's name
            </summary>
            <param name="traceListeners">Trace listeners</param>
            <summary>
            Initializes a new instance of the <see cref="T:JGL.Debugging.AutoTraceSource" /> class.
            </summary>
            <param name="name">Name for the new <see cref="T:JGL.Debugging.AutoTraceSource" /></param>
            <param name="traceListeners">Trace listeners to add to the <see cref="T:JGL.Debugging.AutoTraceSource" /></param>
        </member>
        <member name="F:JGL.Debugging.AutoTraceSource.TraceThreadSleepTime">
            <summary>
            Constant trace thread sleep time.
            </summary>
        </member>
        <member name="F:JGL.Debugging.AutoTraceSource.Trace">
            <summary>
            Tracing <see cref="T:JGL.Debugging.AutoTraceSource" /></summary>
        </member>
        <member name="F:JGL.Debugging.AutoTraceSource.RootTraceLock">
            <summary>
            Used for locking when testing/assigning <see cref="F:JGL.Debugging.AutoTraceSource.Trace" /></summary>
        </member>
        <member name="F:JGL.Debugging.AutoTraceSource._namedSources">
            <summary>
                <see cref="T:JGL.Debugging.AutoTraceSource" /> instances, keyed by <see cref="P:System.Diagnostics.TraceSource.Name" /></summary>
        </member>
        <member name="F:JGL.Debugging.AutoTraceSource._messageQueue">
            <summary>
            The _message queue.
            </summary>
        </member>
        <member name="F:JGL.Debugging.AutoTraceSource.openListeners">
            <summary>
            The open listeners.
            </summary>
        </member>
        <member name="F:JGL.Debugging.AutoTraceSource.TraceThread">
            <summary>
            The close queue.
            </summary>
            <summary>
            The trace thread.
            </summary>
        </member>
        <member name="F:JGL.Debugging.AutoTraceSource._stopThread">
            <summary>
            Set this flag to stop <see cref="F:JGL.Debugging.AutoTraceSource.TraceThread" /></summary>
        </member>
        <member name="F:JGL.Debugging.AutoTraceSource._traceId">
            <summary>
            Current trace id
            </summary>
        </member>
        <member name="P:JGL.Debugging.AutoTraceSource.TraceThreadRunning">
            <summary>
            Indicates if <see cref="F:JGL.Debugging.AutoTraceSource.TraceThread" /> is still looping
            </summary>
        </member>
        <member name="P:JGL.Debugging.AutoTraceSource.TraceId">
            <summary>
            Gets the current trace identifier (incremented for each message logged)
            </summary>
        </member>
        <member name="P:JGL.Debugging.AutoTraceSource.Timestamp">
            <summary>
            Formats a timestamp for use with trace messages
            </summary>
        </member>
        <member name="P:JGL.Debugging.AutoTraceSource.SourceLevels">
            <summary>
            The <see cref="!:TraceSource.Switch.Level" /></summary>
        </member>
        <member name="M:JGL.Debugging.AutoTraceSource.RunTrace">
            <summary>
            Thread entry point
            </summary>
            <remarks>
            TODO: Try out a few different approaches to this e.g.
            		- 31/5 This current approach is the 1-thread running in the background, with a single queue,
            		handling stream writing for all listeners and their streams
            			+ just noticed _messageQueue.TryDequeue should be in a while() conditional expression, not an if
            				(with if thread Sleeps() inbetween writing every message - should loop until queue empty without delay?
            				maybe small delay? don't want this thread randomly hammering a more important thread (e.g. update/render scenes)
            				- Fixed 8/6
            		- Would 1 thread per listener/stream work better?
            		- Both above approaches with varying Thread.Sleep() times
            		- Use Async File operations? How to get an async-capable file handle?
            			+ Thread doesn't wait for each Stream.Write(), instead collects IAsyncResults from a BeginWrite for every
            				message found in the queue for this iteration. Also builds list of the listeners that were involved.
            				At end of thread, calls all the Stream.EndRead() methods and then flushes each listener once
            					- This approach may or may not work - depends on semantics of Stream's Async methods
            					  Definitely worth looking into, the Async approach is probably the best of these above alternatives to try first (?)
            </remarks>
        </member>
        <member name="M:JGL.Debugging.AutoTraceSource.StopTraceThread">
            <summary>
            Stops all <see cref="T:JGL.Debugging.AsyncTraceListener" />s by setting a flag that indicates that <see cref="!:RunThread" /> should return
            </summary>
        </member>
        <member name="M:JGL.Debugging.AutoTraceSource.GetOrCreate(System.Diagnostics.TraceListener[])">
            <summary>
            Gets or creates an <see cref="T:JGL.Debugging.AutoTraceSource" /> with the specified <paramref name="name" /></summary>
            <returns>An <see cref="T:JGL.Debugging.AutoTraceSource" /> reference</returns>
            <param name="traceListeners">
                <see cref="T:System.Diagnostics.TraceListener" />s that should be in <see cref="P:System.Diagnostics.TraceSource.Listeners" /></param>
            <remarks>
            	-	TODO:
            		-	Create another override for this method that takens no params, and gets its default traceListeners
            			(or info to create them) from ONE single location, config of some sort, be it file or otherwise. User
            			can modify default trace listeners, names, filenames??
            </remarks>
        </member>
        <member name="M:JGL.Debugging.AutoTraceSource.GetOrCreate(System.String,System.Diagnostics.TraceListener[])">
            <summary>
            Gets or creates an <see cref="T:JGL.Debugging.AutoTraceSource" /> with the specified <paramref name="name" /></summary>
            <returns>An <see cref="T:JGL.Debugging.AutoTraceSource" /> reference</returns>
            <param name="name">Name for the <see cref="T:JGL.Debugging.AutoTraceSource" /> to get or create</param>
            <param name="traceListeners">
                <see cref="T:System.Diagnostics.TraceListener" />s that should be in <see cref="P:System.Diagnostics.TraceSource.Listeners" /></param>
        </member>
        <member name="M:JGL.Debugging.AutoTraceSource.GetOrCreate(System.String,System.Boolean,System.Diagnostics.TraceListener[])">
            <summary>
            Gets or creates an <see cref="T:JGL.Debugging.AutoTraceSource" /> with the specified <paramref name="name" /></summary>
            <returns>An <see cref="T:JGL.Debugging.AutoTraceSource" /> reference</returns>
            <param name="name">Name for the <see cref="T:JGL.Debugging.AutoTraceSource" /> to get or create</param>
            <param name="autoAddConsoleListener">Whether to add a new <see cref="T:System.Diagnostics.ConsoleTraceListener" /> to the <see cref="T:JGL.Debugging.AutoTraceSource" /> if creating a new instance</param>
            <param name="traceListeners">
                <see cref="T:System.Diagnostics.TraceListener" />s that should be in <see cref="P:System.Diagnostics.TraceSource.Listeners" /></param>
        </member>
        <member name="M:JGL.Debugging.AutoTraceSource.Init(System.String,System.Diagnostics.TraceListener[])">
            <summary>
            Init the specified name and traceListeners.
            </summary>
            <param name="name">Source name</param>
            <param name="traceListeners">Trace listeners</param>
        </member>
        <member name="M:JGL.Debugging.AutoTraceSource.Log(System.Diagnostics.TraceEventType,System.Object[])">
            <summary>
            Log specified <paramref name="data" /> using the specified <see cref="T:System.Diagnostics.TraceEventType" /></summary>
            <param name="type">The <see cref="T:System.Diagnostics.TraceEventType" /> to use</param>
            <param name="data">Data to log</param>
        </member>
        <member name="M:JGL.Debugging.AutoTraceSource.Log(System.Diagnostics.TraceEventType,System.String)">
            <summary>
            Log specified <paramref name="message" /> using the specified <see cref="T:System.Diagnostics.TraceEventType" /></summary>
            <param name="type">The <see cref="T:System.Diagnostics.TraceEventType" /> to use</param>
            <param name="message">Message to log</param>
        </member>
        <member name="M:JGL.Debugging.AutoTraceSource.Log(System.Diagnostics.TraceEventType,System.String,System.Object[])">
            <summary>
            Log specified <paramref name="data" /> using the specified <see cref="T:System.Diagnostics.TraceEventType" /></summary>
            <param name="type">The <see cref="T:System.Diagnostics.TraceEventType" /> to use</param>
            <param name="format">Message/Format string to log</param>
            <param name="data">Data to log</param>
        </member>
        <member name="M:JGL.Debugging.AutoTraceSource.Log(System.Diagnostics.TraceEventType,System.Exception)">
            <summary>
            Log the specified <see cref="T:System.Exception" /> using the specified <see cref="T:System.Diagnostics.TraceEventType" /></summary>
            <param name="type">The <see cref="T:System.Diagnostics.TraceEventType" /> to use</param>
            <param name="ex">The <see cref="T:System.Exception" /> to log</param>
        </member>
        <member name="M:JGL.Debugging.AutoTraceSource.Assert(System.Boolean)">
            <summary>
            Assert the specified condition, logging result to <see cref="F:JGL.Debugging.AutoTraceSource.Trace" /></summary>
            <param name="condition">Condition</param>
        </member>
        <member name="T:JGL.Heirarchy.Object">
            <summary>
            An <see cref="T:JGL.Heirarchy.Entity" /> in 3D space, ie it implements <see cref="T:JGL.Heirarchy.IPositionable" /> and <see cref="T:JGL.Heirarchy.IRotatable" /></summary>
        </member>
        <member name="M:JGL.Heirarchy.Object.#ctor(JGL.Heirarchy.Entity[])">
            <summary>
            Initializes a new instance of the <see cref="T:JGL.Heirarchy.Object" /> class.
            </summary>
        </member>
        <member name="M:JGL.Heirarchy.Object.#ctor(System.String,JGL.Heirarchy.Entity[])">
            <summary>
            Initializes a new instance of the <see cref="T:JGL.Heirarchy.Object" /> class.
            </summary>
        </member>
        <member name="F:JGL.Heirarchy.Object.Trace">
            <summary>
            Tracing
            </summary>
        </member>
        <member name="P:JGL.Heirarchy.Object.Position">
            <summary>
            Position in 3D space
            </summary>
            <remarks>IPositionable implementation</remarks>
        </member>
        <member name="P:JGL.Heirarchy.Object.Rotation">
            <summary>
            Rotation in 3D space (X,Y,Z each describe number of degrees rotation around the X/Y/Z unit vector)
            </summary>
            <remarks>IRotatable implementation</remarks>
        </member>
        <member name="P:JGL.Heirarchy.Object.Orientation">
            <summary>
            Gets or sets the object orientation (linked to <see cref="P:JGL.Heirarchy.Object.Rotation" /></summary>
        </member>
        <member name="M:JGL.Heirarchy.Object.Move(OpenTK.Vector3d,System.Double)">
            <summary>
            Move Position vector a distance in the given direction
            </summary>
            <param name="direction">
            Orientation.
            </param>
            <param name="distance">
            Distance.
            </param>
            <remarks>
            TODO:
            Implement/find your own Vector3d class, use that, move this method into that class. Could leave it here as well and
            call the Vector3d member. V3d class will need explicit (and implicit if possible?) conversion operator to OpenTK.Vector3d
            </remarks>
        </member>
        <member name="M:JGL.Heirarchy.Object.MoveForward(System.Double)">
            <summary>Moves <see cref="T:JGL.Heirarchy.Entity" /> forward</summary>
            <param name="distance">Distance to move, default 1.0</param>
        </member>
        <member name="M:JGL.Heirarchy.Object.MoveBackward(System.Double)">
            <summary>Moves <see cref="T:JGL.Heirarchy.Entity" /> backward</summary>
            <param name="distance">Distance to move, default 1.0</param>
        </member>
        <member name="M:JGL.Heirarchy.Object.IncludeAllMeshes(JGL.Heirarchy.Mesh)">
            <summary>
            Default <see cref="M:JGL.Heirarchy.Object.MergeChildMeshes(JGL.Heirarchy.Object.MeshInclusionTest)" /> inclusion test includes all.
            </summary>
            <returns>
                <c>true</c>, always</returns>
            <param name="mesh">The <see cref="T:JGL.Heirarchy.Mesh" /> that will be included</param>
        </member>
        <member name="M:JGL.Heirarchy.Object.MergeChildMeshes(JGL.Heirarchy.Object.MeshInclusionTest)">
            <summary>
            Merges selected (by <paramref name="inclusionTest" />) child <see cref="T:JGL.Heirarchy.Mesh" /><see cref="T:JGL.Heirarchy.Entity" />s'
            <see cref="F:JGL.Heirarchy.Mesh.VertexData" />s into a single instance, and referenced only by a single <see cref="T:JGL.Heirarchy.Mesh" /><see cref="T:JGL.Heirarchy.Entity" /> that has had all the children's <see cref="F:JGL.Heirarchy.Mesh.Triangles" /> copied to it. If this
            <see cref="T:JGL.Heirarchy.Object" /> instance is not a <see cref="T:JGL.Heirarchy.Mesh" />, a new one is created and returned, after replacing
            <c>this</c> instance in the heirarchy (hence unless it is referenced elsewhere, <c>this</c> instance should be
            marked for garbage collection.
            </summary>
            <returns>
            Unless there are no child M<see cref="T:JGL.Heirarchy.Mesh" />es (whether they are selected for merging or not), returns a <see cref="T:JGL.Heirarchy.Mesh" />
            instance, that is either <c>this</c>, or a newly created instance. If there are no child <see cref="T:JGL.Heirarchy.Mesh" />es, returns <c>this</c></returns>
            <param name="inclusionTest">Inclusion test, default includes all</param>
        </member>
        <member name="M:JGL.Heirarchy.Object.CombineChildMeshes(JGL.Heirarchy.Object.MeshInclusionTest)">
            <summary>
            Merges selected (by <paramref name="inclusionTest" />) child <see cref="T:JGL.Heirarchy.Mesh" /><see cref="T:JGL.Heirarchy.Entity" />s'
            <see cref="F:JGL.Heirarchy.Mesh.VertexData" />s into a single instance, which is then referenced by all the child <see cref="T:JGL.Heirarchy.Mesh" /><see cref="T:JGL.Heirarchy.Entity" />s that were selected for combining.
            </summary>
            <param name="inclusionTest">Inclusion test</param>
        </member>
        <member name="F:JGL.Geometry.Vector3d.Trace">
            <summary>
            Tracing
            </summary>
        </member>
        <member name="M:JGL.Geometry.Vector3d.GetHashCode">
            <summary>
            Serves as a hash function for a <see cref="T:JGL.Geometry.Vector3d" /> object.
            </summary>
            <returns>
            A hash code for this instance that is suitable for use in hashing algorithms and data structures such as a hash table.
            	-	This is a giant stabby hack in the dark, I have no idea if it is at all suitable as a hash function
            		(When is it required? Sorting and comparing in dictionaries and such??)
            </returns>
        </member>
        <member name="F:JGL.Geometry.Normal.Trace">
            <summary>
            Tracing
            </summary>
        </member>
        <member name="F:JGL.Geometry.Vertex.Trace">
            <summary>
            Tracing
            </summary>
        </member>
        <member name="T:JGL.Heirarchy.Library.Box">
            <summary>
            A mesh representation of a box in 3D space
            </summary>
        </member>
        <member name="M:JGL.Heirarchy.Library.Box.#ctor(JGL.Heirarchy.TexturiseMethod{JGL.Heirarchy.Library.Box})">
            <summary>
            Initializes a new instance of the <see cref="T:JGL.Heirarchy.Library.Box" /> class.
            </summary>
            <param name="texturiseMethod">A <see cref="!:BoxTexturiseMethod" /> instance, or null to use <see cref="!:DefaultTexturiseEachFace" /></param>
        </member>
        <member name="M:JGL.Heirarchy.Library.Box.#ctor(System.String,JGL.Heirarchy.TexturiseMethod{JGL.Heirarchy.Library.Box})">
            <summary>
            Initializes a new instance of the <see cref="T:JGL.Heirarchy.Library.Box" /> class.
            </summary>
            <param name="name">Name</param>
            <param name="texturiseMethod">A <see cref="!:BoxTexturiseMethod" /> instance, or null to use <see cref="!:DefaultTexturiseEachFace" /></param>
        </member>
        <member name="M:JGL.Heirarchy.Library.Box.#ctor(System.String,System.Double,System.Double,System.Double,JGL.Heirarchy.TexturiseMethod{JGL.Heirarchy.Library.Box})">
            <summary>
            Initializes a new instance of the <see cref="T:JGL.Heirarchy.Library.Box" /> class.
            </summary>
            <param name="name">Name</param>
            <param name="xSize">X size</param>
            <param name="ySize">Y size</param>
            <param name="zSize">Z size</param>
            <param name="texturiseMethod">A <see cref="!:BoxTexturiseMethod" /> instance, or null to use <see cref="!:DefaultTexturiseEachFace" /></param>
        </member>
        <member name="M:JGL.Heirarchy.Library.Box.#ctor(System.Double,System.Double,System.Double,JGL.Heirarchy.TexturiseMethod{JGL.Heirarchy.Library.Box})">
            <summary>
            Initializes a new instance of the <see cref="T:JGL.Heirarchy.Library.Box" /> class.
            </summary>
            <param name="xSize">X size</param>
            <param name="ySize">Y size</param>
            <param name="zSize">Z size</param>
            <param name="texturiseMethod">A <see cref="!:BoxTexturiseMethod" /> instance, or null to use <see cref="!:DefaultTexturiseEachFace" /></param>
        </member>
        <member name="T:JGL.Heirarchy.Library.Box.TexturiseEachFace">
            <summary>
            Texturise method arguments base class.
            </summary>
            <summary>
            Each face of the <see cref="T:JGL.Heirarchy.Library.Box" /> displays the <see cref="!:Texture" />, repeated <see cref="F:JGL.Heirarchy.Library.Box.TexturiseEachFace.URepeat" />
            times in the U dimension and <see cref="F:JGL.Heirarchy.Library.Box.TexturiseEachFace.VRepeat" /> in the V direction
            </summary>
        </member>
        <member name="F:JGL.Heirarchy.Library.Box.TexturiseEachFace.URepeat">
            <summary>
            How many times to repeat the <see cref="!:Texture" /> in the X (U) direction
            </summary>
        </member>
        <member name="F:JGL.Heirarchy.Library.Box.TexturiseEachFace.VRepeat">
            <summary>
            How many times to repeat the <see cref="!:Texture" /> in the Y (V) direction
            </summary>
        </member>
        <member name="M:JGL.Heirarchy.Library.Box.TexturiseEachFace.Texturise(JGL.Heirarchy.Library.Box)">
            <summary>
            Texturise this instance.
            </summary>
        </member>
        <member name="T:JGL.Heirarchy.Library.Box.TexturiseWholeBox">
            <summary>
            Texturise whole box.
            </summary>
        </member>
        <member name="M:JGL.Heirarchy.Library.Box.TexturiseWholeBox.Texturise(JGL.Heirarchy.Library.Box)">
            <summary>
            Generates texture coordinates that will wrap a single <see cref="!:Texture" /> around the whole box
            </summary>
        </member>
        <member name="F:JGL.Heirarchy.Library.Box.Trace">
            <summary>
            Tracing
            </summary>
        </member>
        <member name="M:JGL.Heirarchy.Library.Box.Init(System.Double,System.Double,System.Double,JGL.Heirarchy.TexturiseMethod{JGL.Heirarchy.Library.Box})">
            <summary>
            Init the specified xSize, ySize, zSize and material.
            </summary>
            <param name="xSize">X size</param>
            <param name="ySize">Y size</param>
            <param name="zSize">Z size</param>
            <param name="texturiseMethod">A <see cref="!:BoxTexturiseMethod" /> instance, or null to use <see cref="!:DefaultTexturiseEachFace" /></param>
        </member>
        <member name="F:JGL.Heirarchy.MaterialLibrary.Trace">
            <summary>
            Tracing
            </summary>
        </member>
        <member name="P:JGL.Heirarchy.MaterialLibrary.Count">
            <summary>
            Gets the count.
            </summary>
            <value>
            The count.
            </value>
            <remarks>ICollection[Material] implementation</remarks>
        </member>
        <member name="P:JGL.Heirarchy.MaterialLibrary.IsReadOnly">
            <summary>
            Gets a value indicating whether this instance is read only.
            </summary>
            <value>
                <c>true</c> if this instance is read only; otherwise, <c>false</c>.
            </value>
            <remarks>ICollection[Material] implementation</remarks>
        </member>
        <member name="M:JGL.Heirarchy.MaterialLibrary.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns>
            The enumerator.
            </returns>
            <remarks>IEnumerable[Material] implementation</remarks>
        </member>
        <member name="M:JGL.Heirarchy.MaterialLibrary.Add(JGL.Heirarchy.Material)">
            <summary>
            Add the specified item.
            </summary>
            <param name="item">
            Item.
            </param>
            <exception cref="T:System.InvalidOperationException">
            Is thrown when an operation cannot be performed.
            </exception>
            <remarks>ICollection[Material] implementation</remarks>
        </member>
        <member name="M:JGL.Heirarchy.MaterialLibrary.Clear">
            <summary>
            Clear this instance.
            </summary>
            <remarks>ICollection[Material] implementation</remarks>
        </member>
        <member name="M:JGL.Heirarchy.MaterialLibrary.Contains(JGL.Heirarchy.Material)">
            <summary>
            Contains the specified item.
            </summary>
            <param name="item">
            If set to <c>true</c> item.
            </param>
            <remarks>ICollection[Material] implementation</remarks>
        </member>
        <member name="M:JGL.Heirarchy.MaterialLibrary.Contains(System.String)">
            <summary>
            Contains the specified materialName.
            </summary>
            <param name="materialName">
            If set to <c>true</c> material name.
            </param>
        </member>
        <member name="M:JGL.Heirarchy.MaterialLibrary.CopyTo(JGL.Heirarchy.Material[],System.Int32)">
            <summary>
            Copies to.
            </summary>
            <param name="array">
            Array.
            </param>
            <param name="arrayIndex">
            Array index.
            </param>
            <remarks>ICollection[Material] implementation</remarks>
        </member>
        <member name="M:JGL.Heirarchy.MaterialLibrary.Remove(JGL.Heirarchy.Material)">
            <summary>
            Remove the specified item.
            </summary>
            <param name="item">
            If set to <c>true</c> item.
            </param>
            <exception cref="T:System.InvalidOperationException">
            Is thrown when an operation cannot be performed.
            </exception>
            <remarks>ICollection[Material] implementation</remarks>
        </member>
        <member name="M:JGL.Heirarchy.MaterialLibrary.GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns>
            The enumerator.
            </returns>
            <remarks>IEnumerable[Material] implementation</remarks>
        </member>
        <member name="M:JGL.Heirarchy.MaterialLibrary.LoadMtlFile(System.IO.Stream)">
            <summary>
            Loads the mtl file.
            </summary>
            <param name="fs">
            Fs.
            </param>
        </member>
        <member name="F:JGL.Heirarchy.Material.Trace">
            <summary>
            Tracing
            </summary>
        </member>
        <member name="M:JGL.Heirarchy.Material.glSet">
            <summary>
            Sets the material parameters using OpenGL
            </summary>
            <remarks>
            - May need a parameter in future (RenderArgs?) for making state information available
            </remarks>
        </member>
        <member name="T:JGL.Heirarchy.Library.Quad">
            <summary>
            A quad mesh - 4 points, two triangles
            </summary>
        </member>
        <member name="M:JGL.Heirarchy.Library.Quad.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:JGL.Heirarchy.Library.Quad" /> class.
            </summary>
            <param name="name">Entity name</param>
        </member>
        <member name="M:JGL.Heirarchy.Library.Quad.#ctor(System.String,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:JGL.Heirarchy.Library.Quad" /> class.
            </summary>
            <param name="name">Entity name</param>
            <param name="xSize">X size</param>
            <param name="zSize">Z size</param>
        </member>
        <member name="M:JGL.Heirarchy.Library.Quad.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:JGL.Heirarchy.Library.Quad" /> class.
            </summary>
            <param name="xSize">X size</param>
            <param name="zSize">Z size</param>
        </member>
        <member name="T:JGL.Heirarchy.Library.Quad.SimpleTexturise">
            <summary>
            Simple texturise method
            </summary>
            <remarks>
            	-	UV coords for vertices are (0,0), (1, 0), (1, 1), (0, 1) respectively
            </remarks>
        </member>
        <member name="F:JGL.Heirarchy.Library.Quad.SimpleTexturise.URepeat">
            <summary>
            The U repeat.
            </summary>
        </member>
        <member name="F:JGL.Heirarchy.Library.Quad.SimpleTexturise.VRepeat">
            <summary>
            The V repeat.
            </summary>
        </member>
        <member name="M:JGL.Heirarchy.Library.Quad.SimpleTexturise.Texturise(JGL.Heirarchy.Library.Quad)">
            <summary>
            Texturise the specified mesh. UV coords for vertices are (0,0), (1, 0), (1, 1), (0, 1) respectively.
            </summary>
            <param name="quad">Mesh</param>
            <remarks>Implemented abstract member of JGL.Heirarchy.TexturiseMethod[Quad]</remarks>
        </member>
        <member name="F:JGL.Heirarchy.Library.Quad.Trace">
            <summary>
            Tracing
            </summary>
        </member>
        <member name="P:JGL.Heirarchy.Library.Quad.XSize">
            <summary>
            Gets or sets the size of the <see cref="T:JGL.Heirarchy.Library.Quad" /> in the X dimension
            </summary>
        </member>
        <member name="P:JGL.Heirarchy.Library.Quad.ZSize">
            <summary>
            Gets or sets the size of the <see cref="T:JGL.Heirarchy.Library.Quad" /> in the Z dimension
            </summary>
        </member>
        <member name="M:JGL.Heirarchy.Library.Quad.Init(System.Double,System.Double)">
            <summary>
            Init the specified xSize and zSize.
            </summary>
            <param name="xSize">X size</param>
            <param name="zSize">Z size</param>
        </member>
        <member name="T:JGL.Heirarchy.Library.Triangle">
            <summary>
            A triangle mesh - 3 points, one triangle
            </summary>
        </member>
        <member name="M:JGL.Heirarchy.Library.Triangle.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:JGL.Heirarchy.Library.Triangle" /> class.
            </summary>
            <param name="name">Entity name</param>
        </member>
        <member name="M:JGL.Heirarchy.Library.Triangle.#ctor(System.String,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:JGL.Heirarchy.Library.Triangle" /> class.
            </summary>
            <param name="name">Entity name</param>
            <param name="xSize">X size</param>
            <param name="zSize">Z size</param>
        </member>
        <member name="M:JGL.Heirarchy.Library.Triangle.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:JGL.Heirarchy.Library.Triangle" /> class.
            </summary>
            <param name="xSize">X size</param>
            <param name="zSize">Z size</param>
        </member>
        <member name="F:JGL.Heirarchy.Library.Triangle.Trace">
            <summary>
            Tracing
            </summary>
        </member>
        <member name="M:JGL.Heirarchy.Library.Triangle.Init(System.Double,System.Double)">
            <summary>
            Init the specified xSize and zSize.
            </summary>
            <param name="xSize">X size</param>
            <param name="zSize">Z size</param>
        </member>
        <member name="T:JGL.Heirarchy.Library.Grid">
            <summary>
            A grid mesh
            </summary>
        </member>
        <member name="M:JGL.Heirarchy.Library.Grid.#ctor(System.String,System.Double,System.Double,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:JGL.Heirarchy.Library.Grid" /> class.
            </summary>
            <summary>
            Initializes a new instance of the <see cref="T:JGL.Heirarchy.Library.Quad" /> class.
            </summary>
            <param name="name">Entity name</param>
            <param name="xSize">X size</param>
            <param name="zSize">Z size</param>
            <param name="xResolution">X resolution (number of points used in X dimension, minus one)</param>
            <param name="zResolution">Z resolution (number of points used in Z dimension, minus one)</param>
        </member>
        <member name="M:JGL.Heirarchy.Library.Grid.#ctor(System.Double,System.Double,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:JGL.Heirarchy.Library.Quad" /> class.
            </summary>
            <param name="xSize">X size</param>
            <param name="zSize">Z size</param>
            <param name="xResolution">X resolution (number of points used in X dimension, minus one)</param>
            <param name="zResolution">Z resolution (number of points used in Z dimension, minus one)</param>
        </member>
        <member name="F:JGL.Heirarchy.Library.Grid.Trace">
            <summary>
            Tracing
            </summary>
        </member>
        <member name="P:JGL.Heirarchy.Library.Grid.XSize">
            <summary>
            Gets or sets the size of the <see cref="T:JGL.Heirarchy.Library.Grid" /> in the X dimension
            </summary>
        </member>
        <member name="P:JGL.Heirarchy.Library.Grid.ZSize">
            <summary>
            Gets or sets the size of the <see cref="T:JGL.Heirarchy.Library.Grid" /> in the Z dimension
            </summary>
        </member>
        <member name="P:JGL.Heirarchy.Library.Grid.XResolution">
            <summary>
            Gets or sets the X resolution (The number of points in the X dimension that the <see cref="T:JGL.Heirarchy.Library.Grid" /> contains, minus one)
            </summary>
        </member>
        <member name="P:JGL.Heirarchy.Library.Grid.ZResolution">
            <summary>
            Gets or sets the X resolution (The number of points in the Z dimension that the <see cref="T:JGL.Heirarchy.Library.Grid" /> contains, minus one)
            </summary>
        </member>
        <member name="M:JGL.Heirarchy.Library.Grid.Init(System.Double,System.Double,System.Int32,System.Int32)">
            <summary>
            Init the specified xSize and zSize.
            </summary>
            <param name="xSize">X size</param>
            <param name="zSize">Z size</param>
            <param name="xResolution">X resolution (number of points used in X dimension, minus one)</param>
            <param name="zResolution">Z resolution (number of points used in Z dimension, minus one)</param>
            <remarks>
            	-	TODO: Finish this
            		-	Need to think about how to construct/render trianglefaces in the grid
            </remarks>
        </member>
        <member name="M:JGL.Geometry.TriangleFace.#ctor(JGL.Geometry.TriangleFace,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:JGL.Geometry.TriangleFace" /> class, by cloning another and then
            adding an adjustment to all of the vertex, nromal and texture coord indices. Used by <see cref="!:Object.MergeChildMeshes" /></summary>
            <param name="source">
            Source.
            </param>
            <param name="viAdjust">
            Vi adjust.
            </param>
            <param name="niAdjust">
            Ni adjust.
            </param>
            <param name="tiAdjust">
            Ti adjust.
            </param>
        </member>
        <member name="F:JGL.Geometry.TriangleFace.Trace">
            <summary>
            Tracing
            </summary>
        </member>
        <member name="T:JGL.Extensions.Uri_Ext">
            <summary>
            Extension method class for <see cref="T:System.Uri" /></summary>
            <remarks>
            	- TODO:
            		- Tracing (sort out overall tracing approach (source names, how many sources, etc) within JGL project)
            </remarks>
        </member>
        <member name="F:JGL.Extensions.Uri_Ext.Trace">
            <summary>
            Tracing
            </summary>
        </member>
        <member name="M:JGL.Extensions.Uri_Ext.Open(System.Uri,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
            <summary>
            Open the <paramref name="uri" /> and return a <see cref="!:System.Stream" /> representing it
            </summary>
            <param name="uri">
                <see cref="T:System.Uri" /> to open</param>
        </member>
        <member name="T:JGL.Geometry.VertexData">
            <summary>
            Describes a collection vertices, and optionally normals, texture coordinates and materials, used by <see cref="T:JGL.Heirarchy.Mesh" /></summary>
        </member>
        <member name="M:JGL.Geometry.VertexData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="!:JGL.Geometry.MeshVertexData" /> class.
            </summary>
        </member>
        <member name="F:JGL.Geometry.VertexData.Trace">
            <summary>
            Tracing
            </summary>
        </member>
        <member name="P:JGL.Geometry.VertexData.Vertices">
            <summary>
            The vertices.
            </summary>
        </member>
        <member name="P:JGL.Geometry.VertexData.Normals">
            <summary>
            The normals.
            </summary>
        </member>
        <member name="P:JGL.Geometry.VertexData.TexCoords">
            <summary>
            The tex coords.
            </summary>
        </member>
        <member name="P:JGL.Geometry.VertexData.Materials">
            <summary>
            The texture.
            </summary>
        </member>
        <member name="M:JGL.Geometry.VertexData.Clear">
            <summary>
            Clear this instance.
            </summary>
        </member>
        <member name="T:JGL.Heirarchy.EntityRootContext">
            <summary>
            A special subclass of <see cref="!:JGL.Heirarchy.Context" /> designed
            ... ??
            to hold all <see cref="T:JGL.Heirarchy.Scene" />s ??
            other top level entities??
            </summary>
        </member>
        <member name="M:JGL.Heirarchy.EntityRootContext.#ctor(JGL.Heirarchy.Entity[])">
            <summary>
            Initializes a new instance of the <see cref="T:JGL.Heirarchy.EntityRootContext" /> class.
            </summary>
            <param name="entities">Optional parameter array of child <see cref="T:JGL.Heirarchy.Entity" /> instances</param>
        </member>
        <member name="F:JGL.Heirarchy.EntityRootContext.Trace">
            <summary>
            Tracing
            </summary>
        </member>
        <member name="T:JGL.Heirarchy.EntityContext">
            <summary>
            An <see cref="T:JGL.Heirarchy.Entity" />-derived class that contains 0+ child entities
            </summary>
            <remarks>
            		- TODO: Would be nice if this could implement IEnumerable, (i think) this allows LINQ queries?
            			- Could use for stuff like foreach (Entity e from RootContext.Descendants
            																			where e.GetType().Equals(typeof(JGL.Heirarchy.Object)) and e.Id != "excludedId")
            </remarks>
        </member>
        <member name="M:JGL.Heirarchy.EntityContext.#ctor(JGL.Heirarchy.Entity[])">
            <summary>
            Constructs a new <see cref="T:JGL.Heirarchy.EntityContext" /> with zero initial child entities
            </summary>
            <param name="entities">Optional parameter array of child <see cref="T:JGL.Heirarchy.Entity" /> instances</param>
        </member>
        <member name="M:JGL.Heirarchy.EntityContext.#ctor(System.String,JGL.Heirarchy.Entity[])">
            <summary>
            Constructs a new <see cref="T:JGL.Heirarchy.EntityContext" /> with zero initial child entities
            </summary>
            <param name="name">Name for the new <see cref="T:JGL.Heirarchy.EntityContext" /></param>
            <param name="entities">Optional parameter array of child <see cref="T:JGL.Heirarchy.Entity" /> instances</param>
        </member>
        <member name="T:JGL.Heirarchy.EntityContext.EntityEventArgs">
            <summary>
            Entity event arguments.
            </summary>
        </member>
        <member name="F:JGL.Heirarchy.EntityContext.EntityEventArgs.Cancel">
            <summary>
            The <see cref="T:JGL.Heirarchy.EntityContext.EntityEventHandler" /> can set this to <c>true</c> to cause the
            <see cref="!:EntityContext.EntityEvent" /> to be cancelled.
            </summary>
        </member>
        <member name="T:JGL.Heirarchy.EntityContext.EntityEventHandler">
            <summary>
                <see cref="!:EntityEvent" /> handler delegate type
            </summary>
        </member>
        <member name="F:JGL.Heirarchy.EntityContext.Trace">
            <summary>
            Tracing
            </summary>
        </member>
        <member name="F:JGL.Heirarchy.EntityContext.Root">
            <summary>
            The root <see cref="T:JGL.Heirarchy.EntityContext" /></summary>
        </member>
        <member name="F:JGL.Heirarchy.EntityContext.Current">
            <summary>
            The current context.
            </summary>
        </member>
        <member name="E:JGL.Heirarchy.EntityContext.EntityAdded">
            <summary>
            Occurs when an <see cref="T:JGL.Heirarchy.Entity" /> is added to this <see cref="T:JGL.Heirarchy.EntityContext" /></summary>
        </member>
        <member name="E:JGL.Heirarchy.EntityContext.EntityRemoved">
            <summary>
            Occurs when an <see cref="T:JGL.Heirarchy.Entity" /> is removed from this <see cref="T:JGL.Heirarchy.EntityContext" /></summary>
        </member>
        <member name="E:JGL.Heirarchy.EntityContext.EntityRenamed">
            <summary>
            Occurs when an <see cref="T:JGL.Heirarchy.Entity" /> is renamed in this <see cref="T:JGL.Heirarchy.EntityContext" /></summary>
        </member>
        <member name="P:JGL.Heirarchy.EntityContext.Item(System.String)">
            <summary>
            Get the <see cref="T:JGL.Heirarchy.Entity" /> with the specified <paramref name="entityName" /></summary>
            <param name="entityName">Name of entity to get</param>
        </member>
        <member name="P:JGL.Heirarchy.EntityContext.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:JGL.Heirarchy.Entity" /> at the specified index <paramref name="entityIndex" /></summary>
            <param name="entityIndex">Index of the <see cref="T:JGL.Heirarchy.Entity" /> to get</param>
        </member>
        <member name="P:JGL.Heirarchy.EntityContext.Entities">
            <summary>
            Return a <see cref="!:System.Collections.Generic.ICollection" />
            representing the current direct child entities of this <see cref="T:JGL.Heirarchy.EntityContext" /></summary>
        </member>
        <member name="P:JGL.Heirarchy.EntityContext.Objects">
            <summary>
            Return a <see cref="!:System.Collections.Generic.ICollection" />
            representing the current direct child entities of this <see cref="T:JGL.Heirarchy.EntityContext" />
            which are of type <see cref="T:JGL.Heirarchy.Object" /></summary>
            <remarks>
            	-	TODO: Test this. Might need to change to return <c>this.OfType`1[Object]()</c></remarks>
        </member>
        <member name="P:JGL.Heirarchy.EntityContext.Descendants">
            <summary>
            Get <see cref="T:JGL.Heirarchy.Entity" />s contained in this <see cref="T:JGL.Heirarchy.EntityContext" /> which are of type <typeparamref name="TEntity" /></summary>
            <returns>
                <see cref="T:JGL.Heirarchy.Entity" />s of type <typeparamref name="TEntity" /></returns>
            <typeparam name="TEntity">The type of <see cref="T:JGL.Heirarchy.Entity" />s to return</typeparam>
            <summary>
            Gets the descendant <see cref="T:JGL.Heirarchy.Entity" />s of this <see cref="T:JGL.Heirarchy.EntityContext" /></summary>
            <remarks>
            	- Uses <c>yield</c>
            	- TODO: Would be nice if this was an ICollection, because that would mean it has a Count member? (and prob other things)
            		- NicER would be IEnumerable, (i think) this allows LINQ queries?
            			- Could use for stuff like foreach (Entity e from RootContext.Descendants
            																			where e.GetType().Equals(typeof(JGL.Heirarchy.Object)) and e.Id != "excludedId")
            </remarks>
        </member>
        <member name="P:JGL.Heirarchy.EntityContext.Count">
            <summary>
            Gets the number of <see cref="T:JGL.Heirarchy.Entity" />s in this <see cref="T:JGL.Heirarchy.EntityContext" /></summary>
            <remarks>ICollection[Entity] implementation</remarks>
        </member>
        <member name="P:JGL.Heirarchy.EntityContext.IsReadOnly">
            <summary>
            Gets a value indicating whether this <see cref="T:JGL.Heirarchy.EntityContext" /> instance is read only.
            </summary>
            <returns>
                <c>False</c>
            </returns>
            <remarks>ICollection[Entity] implementation</remarks>
        </member>
        <member name="M:JGL.Heirarchy.EntityContext.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets a non-generic enumerator
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator" /> enumerator</returns>
            <remarks>IEnumerable implementation</remarks>
        </member>
        <member name="M:JGL.Heirarchy.EntityContext.Contains(JGL.Heirarchy.Entity)">
            <summary>
            Test if the given <see cref="T:JGL.Heirarchy.Entity" /> exists in this <see cref="T:JGL.Heirarchy.EntityContext" /></summary>
            <param name="e">The <see cref="T:JGL.Heirarchy.Entity" /> to check for existence of</param>
            <returns>
                <c>True</c> if found, otherwise <c>false</c></returns>
            <remarks>ICollection implementation</remarks>
        </member>
        <member name="M:JGL.Heirarchy.EntityContext.Contains(System.String)">
            <summary>
            Test if the given <see cref="T:JGL.Heirarchy.Entity" /> exists in this <see cref="T:JGL.Heirarchy.EntityContext" /></summary>
            <param name="entityName">The entity name to check for existence of</param>
            <returns>
                <c>True</c> if found, otherwise <c>false</c></returns>
        </member>
        <member name="M:JGL.Heirarchy.EntityContext.Add(JGL.Heirarchy.Entity)">
            <summary>
            Add an <see cref="T:JGL.Heirarchy.Entity" /> to this <see cref="T:JGL.Heirarchy.EntityContext" /></summary>
            <param name="e">The <see cref="T:JGL.Heirarchy.Entity" /> to add</param>
            <remarks>ICollection implementation</remarks>
        </member>
        <member name="M:JGL.Heirarchy.EntityContext.Add(JGL.Heirarchy.Entity[])">
            <summary>
            Add one or more <see cref="T:JGL.Heirarchy.Entity" /> instances to this <see cref="T:JGL.Heirarchy.EntityContext" /></summary>
            <param name="entities">
                <see cref="T:JGL.Heirarchy.Entity" /> instance(s) to add</param>
        </member>
        <member name="M:JGL.Heirarchy.EntityContext.Remove(JGL.Heirarchy.Entity)">
            <summary>
            Attempt to remove the given <see cref="T:JGL.Heirarchy.Entity" /> from this <see cref="T:JGL.Heirarchy.EntityContext" /></summary>
            <param name="e">The <see cref="T:JGL.Heirarchy.Entity" /> to attempt to remove</param>
            <returns>
                <c>true</c> if found and removed, otherwise, <c>false</c></returns>
            <remarks>ICollection[Entity] implementation</remarks>
        </member>
        <member name="M:JGL.Heirarchy.EntityContext.Remove(System.String)">
            <summary>
            Attempt to remove the given <see cref="T:JGL.Heirarchy.Entity" /> from this <see cref="T:JGL.Heirarchy.EntityContext" /></summary>
            <param name="entityName">The name of the <see cref="T:JGL.Heirarchy.Entity" /> to attempt to remove</param>
            <returns>
                <c>true</c> if found and removed, otherwise, <c>false</c></returns>
        </member>
        <member name="M:JGL.Heirarchy.EntityContext.Clear">
            <summary>
            Clear all <see cref="T:JGL.Heirarchy.Entity" />s from this <see cref="T:JGL.Heirarchy.EntityContext" /></summary>
            <remarks>ICollection[Entity] implementation</remarks>
        </member>
        <member name="M:JGL.Heirarchy.EntityContext.CopyTo(JGL.Heirarchy.Entity[],System.Int32)">
            <summary>
            Copies all <see cref="T:JGL.Heirarchy.Entity" />s in this <see cref="T:JGL.Heirarchy.EntityContext" />
            to <paramref name="array" />, starting at index <paramref name="arrayIndex" /></summary>
            <param name="array">The array to copy the <see cref="T:JGL.Heirarchy.Entity" />s to</param>
            <param name="arrayIndex">The base index into the array to start copying to</param>
            <remarks>ICollection[Entity] implementation</remarks>
        </member>
        <!--FIXME: Invalid documentation markup was found for member M:JGL.Heirarchy.EntityContext.GetEnumerator-->
        <member name="T:JGL.Extensions.Object_Ext">
            <summary>
                <see cref="T:System.Object" /> extension methods
            </summary>
        </member>
        <member name="M:JGL.Extensions.Object_Ext.IsTypeOf(System.Object,System.Type)">
            <summary>
            Determines whether this instance's <see cref="T:System.Type" /> is of the specified <see cref="T:System.Type" /><paramref name="typeOf" /></summary>
            <returns>
                <c>true</c> if this instance's <see cref="T:System.Type" /> is of the specified <see cref="T:System.Type" /><paramref name="typeOf" />; otherwise, <c>false</c>.
            </returns>
            <param name="obj">If set to <c>true</c> object</param>
            <param name="typeOf">If set to <c>true</c> type of</param>
        </member>
        <member name="T:JGL.Debugging.LogMessage">
            <summary>
            Log message class stores log message parameters
            </summary>
        </member>
        <member name="M:JGL.Debugging.LogMessage.#ctor(System.Diagnostics.TraceEventCache,System.Diagnostics.TraceSource,System.Diagnostics.TraceEventType,System.Int32,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="!:JGL.Debugging.AsyncTraceListener.LogMessage" /> class.
            </summary>
            <param name="listener">The listener the message is for</param>
            <param name="eventCache">Event cache</param>
            <param name="source">Source</param>
            <param name="eventType">Event type</param>
            <param name="id">Identifier</param>
            <param name="data">Data</param>
        </member>
        <member name="M:JGL.Debugging.LogMessage.#ctor(System.Diagnostics.TraceEventCache,System.Diagnostics.TraceSource,System.Diagnostics.TraceEventType,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="!:JGL.Debugging.AsyncTraceListener.LogMessage" /> class.
            </summary>
            <param name="listener">The listener the message is for</param>
            <param name="eventCache">Event cache</param>
            <param name="source">Source</param>
            <param name="eventType">Event type</param>
            <param name="id">Identifier</param>
            <param name="message">Message</param>
        </member>
        <member name="M:JGL.Debugging.LogMessage.#ctor(System.Diagnostics.TraceEventCache,System.Diagnostics.TraceSource,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="!:JGL.Debugging.AsyncTraceListener.LogMessage" /> class.
            </summary>
            <param name="listener">The listener the message is for</param>
            <param name="eventCache">Event cache</param>
            <param name="source">Source</param>
            <param name="eventType">Event type</param>
            <param name="id">Identifier</param>
            <param name="format">Message</param>
        </member>
        <member name="F:JGL.Debugging.LogMessage.EventCache">
            <summary>
            Ensures that <paramref name="message" /> is of type <see cref="T:JGL.Debugging.LogMessage" />.
            </summary>
            <remarks>
            	-	Used internally for <see cref="T:System.Diagnostics.TraceListener" />s that override <see cref="M:System.Diagnostics.TraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)" /></remarks>
            <param name="message">Instance to check type of</param>
            <exception cref="T:System.ArgumentNullException">
            Is thrown when an argument passed to a method is invalid because it is <see langword="null" /> .
            </exception>
            <exception cref="T:System.ArgumentException">
            Is thrown when an argument passed to a method is invalid.
            </exception>
            <summary>Event cache</summary>
        </member>
        <member name="F:JGL.Debugging.LogMessage.Source">
            <summary>The <see cref="T:System.Diagnostics.TraceSource" /> that the message originated from</summary>
        </member>
        <member name="F:JGL.Debugging.LogMessage.OutputOptions">
            <summary>
                <see cref="T:System.Diagnostics.TraceOptions" /> for output</summary>
        </member>
        <member name="F:JGL.Debugging.LogMessage.EventType">
            <summary>
                <see cref="T:System.Diagnostics.TraceEventType" /> event type</summary>
        </member>
        <member name="F:JGL.Debugging.LogMessage.Id">
            <summary>Trace message ID</summary>
        </member>
        <member name="F:JGL.Debugging.LogMessage.Format">
            <summary>Format string (or just a plain message string)</summary>
        </member>
        <member name="F:JGL.Debugging.LogMessage.Data">
            <summary>Data to go with the </summary>
        </member>
        <member name="P:JGL.Debugging.LogMessage.Time">
            <summary>Time</summary>
        </member>
        <member name="P:JGL.Debugging.LogMessage.TimeStamp">
            <summary>Time stamp</summary>
        </member>
        <member name="P:JGL.Debugging.LogMessage.Process">
            <summary>Process Id</summary>
        </member>
        <member name="P:JGL.Debugging.LogMessage.Thread">
            <summary>Thread Id</summary>
        </member>
        <member name="P:JGL.Debugging.LogMessage.Frame">
            <summary>
            The <see cref="T:System.Diagnostics.StackFrame" /> that called <see cref="M:JGL.Debugging.AutoTraceSource.Log(System.Diagnostics.TraceEventType,System.Object[])" /></summary>
        </member>
        <member name="P:JGL.Debugging.LogMessage.Callstack">
            <summary>Callstack</summary>
        </member>
        <member name="P:JGL.Debugging.LogMessage.LogicalOperationStack">
            <summary>Logical operation stack</summary>
        </member>
        <member name="P:JGL.Debugging.LogMessage.Message">
            <summary>Message text</summary>
            <remarks>
            	-	If <code><see cref="F:JGL.Debugging.LogMessage.Format" /> == null</code>, returns <code><see cref="F:JGL.Debugging.LogMessage.Data" />.ToString()&gt;</code>
            	-	Else if <code><see cref="F:JGL.Debugging.LogMessage.Data" /> == null</code>, returns <see cref="F:JGL.Debugging.LogMessage.Format" />
            	-	Else returns <code>string.Format(<see cref="F:JGL.Debugging.LogMessage.Format" />, returns <see cref="F:JGL.Debugging.LogMessage.Data" />)</code></remarks>
        </member>
        <member name="P:JGL.Debugging.LogMessage.MessageAsText">
            <summary>Gets the formatted message string</summary>
        </member>
        <member name="M:JGL.Debugging.LogMessage.Init(System.Diagnostics.TraceEventCache,System.Diagnostics.TraceSource,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object)">
            <summary>
            Init the specified eventCache, source, eventType, id, format and data.
            </summary>
            <param name="listener">The listener the message is for</param>
            <param name="eventCache">Event cache</param>
            <param name="source">Source</param>
            <param name="eventType">Event type</param>
            <param name="id">Identifier</param>
            <param name="format">Message</param>
        </member>
        <member name="M:JGL.Debugging.LogMessage.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:JGL.Debugging.LogMessage" />.
            </summary>
            <remarks>
            	-	<see cref="T:System.Diagnostics.ConsoleTraceListener" /> relies on this
            </remarks>
        </member>
        <member name="M:JGL.Debugging.LogMessage.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Writes the xml.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write to</param>
        </member>
        <member name="M:JGL.Debugging.LogMessage.GetSchema">
            <summary>
            Gets the schema.
            </summary>
            <exception cref="T:System.NotImplementedException">
            Is thrown when a requested operation is not implemented for a given type.
            </exception>
        </member>
        <member name="M:JGL.Debugging.LogMessage.ReadXml(System.Xml.XmlReader)">
            <summary>
            Reads the xml.
            </summary>
            <exception cref="T:System.NotImplementedException">
            Is thrown when a requested operation is not implemented for a given type.
            </exception>
        </member>
        <member name="T:JGL.Debugging.AsyncTextFileTraceListener">
            <summary>
            Asynchronous trace listener that writes to a file
            </summary>
        </member>
        <member name="M:JGL.Debugging.AsyncTextFileTraceListener.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:JGL.Debugging.AsyncTextFileTraceListener" /> class.
            </summary>
            <param name="name">Name of the new trace listener</param>
        </member>
        <member name="F:JGL.Debugging.AsyncTextFileTraceListener.Trace">
            <summary>
            Tracing
            </summary>
        </member>
        <member name="F:JGL.Debugging.AsyncTextFileTraceListener.TruncateFile">
            <summary>
            Whether to truncate the file before opening it for writing
            </summary>
        </member>
        <member name="P:JGL.Debugging.AsyncTextFileTraceListener.PathPrefix">
            <summary>
            The path prefix.
            </summary>
        </member>
        <member name="P:JGL.Debugging.AsyncTextFileTraceListener.PathSuffix">
            <summary>
            The path suffix.
            </summary>
        </member>
        <member name="P:JGL.Debugging.AsyncTextFileTraceListener.Path">
            <summary>
            Path of the file that this trace listener will open
            </summary>
        </member>
        <member name="M:JGL.Debugging.AsyncTextFileTraceListener.GetOrCreate(System.String)">
            <summary>
            Gets (if exists) or creates a <see cref="!:AsyncFileTraceListener" /> with the specified <paramref name="name" /></summary>
            <returns>An <see cref="!:AsyncFileTraceListener" /> reference</returns>
            <param name="name">Name of the <see cref="!:AsyncFileTraceListener" /> to get or create</param>
        </member>
        <member name="M:JGL.Debugging.AsyncTextFileTraceListener.OpenStream">
            <summary>
            Opens the <see cref="T:System.IO.Stream" /> the trace listener will write to
            </summary>
            <returns>The newly opened <see cref="T:System.IO.Stream" /></returns>
            <remarks>
            Implementation of abstract member of JGL.Debugging.AsyncTraceListener
            </remarks>
        </member>
        <member name="M:JGL.Debugging.AsyncTextFileTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)">
            <summary>
            Called by <see cref="T:System.Diagnostics.TraceSource" /> methods to specify a message to log
            </summary>
            <param name="eventCache">Event cache</param>
            <param name="source">Source</param>
            <param name="eventType">Event type</param>
            <param name="id">Identifier</param>
            <param name="data">Data</param>
        </member>
        <member name="T:JGL.Debugging.AsyncXmlFileTraceListener">
            <summary>
            Async xml trace listener.
            </summary>
        </member>
        <member name="M:JGL.Debugging.AsyncXmlFileTraceListener.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:JGL.Debugging.AsyncXmlFileTraceListener" /> class.
            </summary>
        </member>
        <member name="M:JGL.Debugging.AsyncXmlFileTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)">
            <summary>
            Traces the data.
            </summary>
            <param name="eventCache">Event cache</param>
            <param name="source">Source</param>
            <param name="eventType">Event type</param>
            <param name="id">Identifier</param>
            <param name="data">Data - should be a <see cref="T:JGL.Debugging.LogMessage" /> instance</param>
        </member>
        <member name="T:JGL.Heirarchy.TexturiseMethod`1">
            <summary>
            An abstract representation of a "Texturise" method. Generates texture coordinates and
            applies them to a specific type of mesh (e.g. <see cref="!:Box" />, <see cref="!:Quad" />)
            </summary>
            <typeparam name="T">A <see cref="T:JGL.Heirarchy.Mesh" />-derived type that this texturise method operates on</typeparam>
        </member>
        <member name="M:JGL.Heirarchy.TexturiseMethod`1.Texturise(`0)">
            <summary>
            Texturise the specified mesh.
            </summary>
            <param name="mesh">A <see cref="T:JGL.Heirarchy.Mesh" />-derived instance to be texturised</param>
        </member>
        <member name="T:JGL.Heirarchy.Resources.Resource">
            <summary>
            Abstract resource base class
            </summary>
        </member>
        <member name="M:JGL.Heirarchy.Resources.Resource.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="!:JGL.Resource.Resource" /> class with an autogenerated <see cref="!:Heirarchy.Entity.Name" /></summary>
            <param name="uri">
                <see cref="T:System.Uri" /> of the stored resource</param>
        </member>
        <member name="M:JGL.Heirarchy.Resources.Resource.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="!:JGL.Resource.Resource" /> class.
            </summary>
            <param name="name">Resource name (no requirement to be unique)</param>
            <param name="path">Path to the stored resource</param>
        </member>
        <member name="F:JGL.Heirarchy.Resources.Resource.LoadThreadSleepTime">
            <summary>
            Constant load thread sleep time.
            </summary>
        </member>
        <member name="F:JGL.Heirarchy.Resources.Resource.Trace">
            <summary>
            Tracing
            </summary>
        </member>
        <member name="F:JGL.Heirarchy.Resources.Resource.SyncRoot">
            <summary>
            The sync root.
            </summary>
        </member>
        <member name="F:JGL.Heirarchy.Resources.Resource.LoadThread">
            <summary>
            Dedicated <see cref="T:JGL.Heirarchy.Resources.Resource" /> loading thread
            </summary>
        </member>
        <member name="F:JGL.Heirarchy.Resources.Resource._loadQueue">
            <summary>
            The _load queue.
            </summary>
        </member>
        <member name="F:JGL.Heirarchy.Resources.Resource._stopLoadThread">
            <summary>
            The _stop load thread.
            </summary>
        </member>
        <member name="P:JGL.Heirarchy.Resources.Resource.IsLoaded">
            <summary>
            Gets a value indicating whether this resource is loaded.
            </summary>
        </member>
        <member name="P:JGL.Heirarchy.Resources.Resource.Path">
            <summary>
            Path to the resource file
            </summary>
        </member>
        <member name="M:JGL.Heirarchy.Resources.Resource.Init(System.String,System.String)">
            <summary>
            Init the instance using given name and uri.
            </summary>
            <param name="name">
                <see cref="!:Heirarchy.Entity.Name" />
            </param>
            <param name="path">Resource Path</param>
        </member>
        <member name="M:JGL.Heirarchy.Resources.Resource.GenerateAutoName">
            <summary>
            Generates the <see cref="P:JGL.Heirarchy.Entity.Name" /> base for auto naming
            </summary>
        </member>
        <member name="M:JGL.Heirarchy.Resources.Resource.Load(System.IO.Stream)">
            <summary>
            Load the <see cref="T:JGL.Heirarchy.Resources.Resource" /></summary>
            <returns>
                <c>true</c>, if loaded successfully, otherwise, <c>false</c></returns>
        </member>
        <member name="M:JGL.Heirarchy.Resources.Resource.LoadResources">
            <summary>
            Executed on the dedicated <see cref="T:JGL.Heirarchy.Resources.Resource" /> loading thread, <see cref="F:JGL.Heirarchy.Resources.Resource.LoadThread" /></summary>
        </member>
        <member name="M:JGL.Heirarchy.Resources.Resource.StartLoadThread">
            <summary>
            Starts the load thread, if not already running
            </summary>
        </member>
        <member name="M:JGL.Heirarchy.Resources.Resource.StopLoadThread">
            <summary>
            Stops the load thread.
            </summary>
        </member>
        <member name="M:JGL.Heirarchy.Resources.Resource.Get(System.String)">
            <summary>
            Get the specified <see cref="T:JGL.Heirarchy.Resources.Resource" /></summary>
            <param name="name">The <see cref="P:JGL.Heirarchy.Entity.Name" /> of the <see cref="T:JGL.Heirarchy.Resources.Resource" /> to get</param>
            <returns>The <see cref="T:JGL.Heirarchy.Resources.Resource" /> with name <paramref name="name" />, if it exists, contained in <see cref="!:EntityContext.RootContext" /></returns>
        </member>
        <member name="M:JGL.Heirarchy.Resources.Resource.Get``1(System.String)">
            <summary>
            Get the specified <see cref="T:JGL.Heirarchy.Resources.Resource" /> of type <typeparamref name="TResource" />, if it already exists,
            otherwise, creates the <see cref="T:JGL.Heirarchy.Resources.Resource" />, adds it to <see cref="F:JGL.Heirarchy.EntityContext.Root" /> and then
            returns the newly created <see cref="T:JGL.Heirarchy.Resources.Resource" /></summary>
            <param name="name">The <see cref="P:JGL.Heirarchy.Entity.Name" /> of the <see cref="T:JGL.Heirarchy.Resources.Resource" /> to get</param>
            <typeparam name="TResource">Type of <see cref="T:JGL.Heirarchy.Resources.Resource" /> to get or create</typeparam>
            <returns>The <see cref="T:JGL.Heirarchy.Resources.Resource" /> with name <paramref name="name" />, if it exists, contained in <see cref="!:EntityContext.RootContext" /></returns>
        </member>
        <member name="T:JGL.Heirarchy.Resources.Texture">
            <summary>
            Texture <see cref="T:JGL.Heirarchy.Resources.Resource" /></summary>
        </member>
        <member name="M:JGL.Heirarchy.Resources.Texture.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="!:JGL.Resource.Texture" /> class.
            </summary>
            <param name="path">Path to <see cref="T:JGL.Heirarchy.Resources.Texture" /></param>
        </member>
        <member name="M:JGL.Heirarchy.Resources.Texture.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="!:JGL.Resource.Texture" /> class.
            </summary>
            <param name="name">
                <see cref="T:JGL.Heirarchy.Resources.Texture" />
                <see cref="P:JGL.Heirarchy.Entity.Name" />
            </param>
            <param name="path">
                <see cref="T:JGL.Heirarchy.Resources.Texture" /> path</param>
        </member>
        <member name="F:JGL.Heirarchy.Resources.Texture.Trace">
            <summary>
            Tracing
            </summary>
        </member>
        <member name="P:JGL.Heirarchy.Resources.Texture.Image">
            <summary>
            Gets or sets the <see cref="T:JGL.Heirarchy.Resources.Texture" /> image
            </summary>
        </member>
        <member name="P:JGL.Heirarchy.Resources.Texture.Width">
            <summary>
            Gets the width.
            </summary>
        </member>
        <member name="P:JGL.Heirarchy.Resources.Texture.Height">
            <summary>
            Gets the height.
            </summary>
        </member>
        <member name="P:JGL.Heirarchy.Resources.Texture.TextureId">
            <summary>
            The OpenGL texture id, stored for each GL context it has been used on
            </summary>
        </member>
        <member name="M:JGL.Heirarchy.Resources.Texture.Init(System.String,System.String)">
            <summary>
            Init the instance using given name and uri.
            </summary>
            <param name="name">
                <see cref="T:JGL.Heirarchy.Resources.Texture" />
                <see cref="P:JGL.Heirarchy.Entity.Name" />
            </param>
            <param name="path">
                <see cref="T:JGL.Heirarchy.Resources.Texture" /> path</param>
        </member>
        <member name="M:JGL.Heirarchy.Resources.Texture.Load(System.IO.Stream)">
            <summary>
            Loads a <see cref="T:JGL.Heirarchy.Resources.Texture" /><see cref="T:JGL.Heirarchy.Resources.Resource" /></summary>
            <returns>
                <c>true</c> if successful, otherwise, <c>false</c></returns>
            <remarks>
            	- Executed on <see cref="F:JGL.Heirarchy.Resources.Resource.LoadThread" /></remarks>
        </member>
        <member name="M:JGL.Heirarchy.Resources.Texture.CreateGLTexture(JGL.Heirarchy.Resources.Texture)">
            <summary>
            Creates the GL texture - called once for each GL graphics context the texture is used on (tex ids are different per context - correct?)
            </summary>
            <returns>The GL texture id</returns>
            <param name="texture">
                <see cref="T:JGL.Heirarchy.Resources.Texture" />
            </param>
        </member>
        <member name="T:JGL.IO.Filesystem">
            <summary>
            Static class with helper methods for dealing with files and directories
            </summary>
        </member>
        <member name="M:JGL.IO.Filesystem.Open(System.String,System.IO.FileMode,System.String[])">
            <summary>
            Open a file given a path and <see cref="T:System.IO.FileMode" /></summary>
            <param name="path">Path to file. May be relative or absolute. If relative, searches configured base directories for file</param>
            <param name="mode">
                <see cref="T:System.IO.FileMode" /> to open file with</param>
            <param name="searchPaths">
            Optionally specifies base directory search paths to attempt to find the file in.
            Ignored if <paramref name="path" /> is an absolute path.
            </param>
            <returns>A <see cref="T:System.IO.FileStream" /> representing the opened file</returns>
        </member>
        <member name="T:JGL.Graphics.SceneWindow">
            <summary>
            Scene window
            </summary>
        </member>
        <member name="M:JGL.Graphics.SceneWindow.#ctor(System.Int32,System.Int32,OpenTK.Graphics.GraphicsMode,System.String)">
            <summary>
            Initializes a new instance of the <see cref="!:DynamicCodeTests.SceneWindow" /> class.
            </summary>
            <param name="w">Width</param>
            <param name="h">Height</param>
            <param name="gm">Graphics mode</param>
            <param name="title">Window title</param>
        </member>
        <member name="T:JGL.Heirarchy.EntityCollection">
            <summary>
            A collection of <see cref="T:JGL.Heirarchy.Entity" />s contained by an <see cref="T:JGL.Heirarchy.EntityContext" /></summary>
        </member>
        <member name="M:JGL.Heirarchy.EntityCollection.#ctor(JGL.Heirarchy.EntityContext)">
            <summary>
            Initializes a new instance of the <see cref="T:JGL.Heirarchy.EntityCollection" /> class.
            </summary>
        </member>
        <member name="F:JGL.Heirarchy.EntityCollection._innerDictionary">
            <summary>
            The _inner dictionary.
            </summary>
        </member>
        <member name="F:JGL.Heirarchy.EntityCollection._context">
            <summary>
            The <see cref="T:JGL.Heirarchy.EntityContext" /></summary>
        </member>
        <member name="P:JGL.Heirarchy.EntityCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:JGL.Heirarchy.Entity" /> with the specified name.
            </summary>
            <param name="relativeId">Relative Id of the required <see cref="T:JGL.Heirarchy.Entity" /></param>
        </member>
        <member name="P:JGL.Heirarchy.EntityCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:JGL.Heirarchy.Entity" /> at the specified index <paramref name="entityIndex" /></summary>
            <param name="entityIndex">Index of the <see cref="T:JGL.Heirarchy.Entity" /> to get</param>
        </member>
        <member name="P:JGL.Heirarchy.EntityCollection.Names">
            <summary>
            Get the names of all <see cref="T:JGL.Heirarchy.Entity" /> instances contained in this <see cref="T:JGL.Heirarchy.EntityCollection" /></summary>
        </member>
        <member name="P:JGL.Heirarchy.EntityCollection.Count">
            <summary>
            Get the number of <see cref="T:JGL.Heirarchy.Entity" />s in this <see cref="T:JGL.Heirarchy.EntityCollection" /></summary>
            <remarks>ICollection[Entity] implementation</remarks>
        </member>
        <member name="P:JGL.Heirarchy.EntityCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether this instance is read only.
            </summary>
            <remarks>ICollection[Entity] implementation</remarks>
        </member>
        <member name="M:JGL.Heirarchy.EntityCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
        </member>
        <member name="M:JGL.Heirarchy.EntityCollection.UpdateName(JGL.Heirarchy.Entity,System.String)">
            <summary>
            Called by <see cref="P:JGL.Heirarchy.Entity.Name" /> set accessor when an <see cref="T:JGL.Heirarchy.Entity" /> changes its name, to ensure
            consistency in the <see cref="T:JGL.Heirarchy.EntityContext" /></summary>
            <returns>
                <c>true</c> if updated successfully, otherwise, <c>false</c></returns>
            <param name="entity">The <see cref="T:JGL.Heirarchy.Entity" /> to update name for, with its current name still set</param>
            <param name="newName">The new <see cref="P:JGL.Heirarchy.Entity.Name" /></param>
        </member>
        <member name="M:JGL.Heirarchy.EntityCollection.Get(System.String)">
            <summary>
            Get the <see cref="T:JGL.Heirarchy.Entity" /> using an ID relative to this <see cref="T:JGL.Heirarchy.EntityContext" /></summary>
            <param name="relativeId">An Id string relative to this <see cref="T:JGL.Heirarchy.EntityContext" /></param>
            <returns>The <see cref="T:JGL.Heirarchy.Entity" /> specified by the relative ID</returns>
            <remarks>
            If resources are named as their filename including the extension, the period before the extension causes a problem here
            Hack for now/Possibly longer term: Resources can be specified using "res://" prefix, which causes this method to
            look for an id exactly matching the remainder of the string specified for relative id. EG "res://test1.png" will get child entity
            with the id "test1.png"
            </remarks>
        </member>
        <member name="M:JGL.Heirarchy.EntityCollection.Contains(JGL.Heirarchy.Entity)">
            <summary>
            Determines if this <see cref="T:JGL.Heirarchy.EntityCollection" /> contains the specified <see cref="T:JGL.Heirarchy.Entity" /></summary>
            <param name="e">The <see cref="T:JGL.Heirarchy.Entity" /> to check for</param>
            <remarks>ICollection[Entity] implementation</remarks>
        </member>
        <member name="M:JGL.Heirarchy.EntityCollection.Contains(System.String)">
            <summary>
            Determines if this <see cref="T:JGL.Heirarchy.EntityCollection" /> contains an <see cref="T:JGL.Heirarchy.Entity" /> with the specified name.
            </summary>
            <param name="entityName">The <see cref="T:JGL.Heirarchy.Entity" /> name to check for</param>
        </member>
        <member name="M:JGL.Heirarchy.EntityCollection.Add(JGL.Heirarchy.Entity)">
            <summary>
            Adds an <see cref="T:JGL.Heirarchy.Entity" />s to this <see cref="T:JGL.Heirarchy.EntityCollection" /></summary>
            <param name="e">The <see cref="T:JGL.Heirarchy.Entity" /> to add</param>
            <exception cref="T:System.ArgumentException">
            Thrown when an <see cref="T:JGL.Heirarchy.Entity" /> with the same name already exists
            </exception>
            <exception cref="T:JGL.ConcurrencyException">
            Thrown when <paramref name="e" /> is found but failed to be added to the inner dictionary
            </exception>
            <remarks>ICollection[Entity] implementation</remarks>
        </member>
        <member name="M:JGL.Heirarchy.EntityCollection.Add(JGL.Heirarchy.Entity[])">
            <summary>
            Add the specified <see cref="T:JGL.Heirarchy.Entity" /> instances
            </summary>
            <param name="entities">One or more <see cref="T:JGL.Heirarchy.Entity" /> instances</param>
        </member>
        <member name="M:JGL.Heirarchy.EntityCollection.Remove(JGL.Heirarchy.Entity)">
            <summary>
            Remove the specified <see cref="T:JGL.Heirarchy.Entity" /> from this <see cref="T:JGL.Heirarchy.EntityCollection" /></summary>
            <param name="e">The <see cref="T:JGL.Heirarchy.Entity" /> to remove</param>
            <exception cref="T:JGL.ConcurrencyException">
            Thrown when <paramref name="e" /> is found but failed to be removed
            </exception>
            <remarks>ICollection[Entity] implementation</remarks>
        </member>
        <member name="M:JGL.Heirarchy.EntityCollection.Remove(System.String)">
            <summary>
            Remove the <see cref="T:JGL.Heirarchy.Entity" /> with the specified name.
            </summary>
            <param name="entityName">The <see cref="T:JGL.Heirarchy.Entity" /> name to remove</param>
            <exception cref="T:JGL.ConcurrencyException">
            Thrown when the <paramref name="entityName" /> is found but failed to be removed
            </exception>
        </member>
        <member name="M:JGL.Heirarchy.EntityCollection.Clear">
            <summary>
            Clears this <see cref="T:JGL.Heirarchy.EntityCollection" /></summary>
            <remarks>ICollection[Entity] implementation</remarks>
        </member>
        <member name="M:JGL.Heirarchy.EntityCollection.CopyTo(JGL.Heirarchy.Entity[],System.Int32)">
            <summary>
            Copies the <see cref="T:JGL.Heirarchy.Entity" />s in this <see cref="T:JGL.Heirarchy.EntityCollection" /> to the specified array
            </summary>
            <param name="array">The array to copy the <see cref="T:JGL.Heirarchy.EntityCollection" /> to</param>
            <param name="arrayIndex">The index into the destination array to begin copying at</param>
            <remarks>ICollection[Entity] implementation</remarks>
        </member>
        <member name="M:JGL.Heirarchy.EntityCollection.GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
        </member>
        <member name="T:JGL.EngineOptions">
            <summary>
            Engine.
            </summary>
        </member>
        <member name="M:JGL.EngineOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:JGL.EngineOptions" /> class.
            </summary>
        </member>
        <member name="F:JGL.EngineOptions.ConcurrentCollectionOperationRetryLimit">
            <summary>
            The concurrent collection operation retry limit
            </summary>
            <remarks>
            Currently set to 1, for debugging purposes. Think about appropriate default value otherwise - 2, 4?
            </remarks>
        </member>
        <member name="F:JGL.EngineOptions.ConcurrentCollectionOperationRetryDelayCycles">
            <summary>
            The concurrent collection operation retry delay in milliseconds
            </summary>
            <summary>
            The concurrent collection operation retry delay - number of iterations to <see cref="M:System.Threading.Thread.SpinWait(System.Int32)" /> for
            </summary>
        </member>
        <member name="P:JGL.EngineOptions.ResourceSearchPaths">
            <summary>
            The resource search paths, indexed by type
            </summary>
        </member>
        <member name="P:JGL.Engine.Options">
            <summary>
            Options specified by an <see cref="T:JGL.EngineOptions" /> instance
            </summary>
        </member>
        <member name="M:JGL.Engine.Init">
            <summary>
            Init this instance.
            </summary>
        </member>
        <member name="M:JGL.Engine.Quit">
            <summary>
            Quit this instance.
            </summary>
        </member>
        <member name="T:JGL.ConcurrencyException">
            <summary>
            Concurrency exception.
            </summary>
        </member>
        <member name="P:JGL.Heirarchy.HeirarchyException.ContextId">
            <summary>
            Optional (but really should always be supplied, I think) identifier of the <see cref="T:JGL.Heirarchy.EntityContext" />
            that the exception occurred in
            </summary>
        </member>
        <member name="P:JGL.Heirarchy.HeirarchyException.EntityName">
            <summary>
            Optional name of an <see cref="T:JGL.Heirarchy.Entity" /> that the exception relates to
            </summary>
        </member>
        <member name="T:JGL.Graphics.RenderArgs">
            <summary>
            Contains info relevant to classes' implementations of <see cref="M:JGL.Heirarchy.IRenderable.Render(JGL.Graphics.RenderArgs)" /></summary>
            <remarks>Inherits from <see cref="T:System.EventArgs" /> so that it can be passed to event handlers</remarks>
        </member>
        <member name="M:JGL.Graphics.RenderArgs.#ctor(JGL.Heirarchy.Scene,JGL.Graphics.SceneWindow)">
            <summary>
            Initializes a new instance of the <see cref="!:JGL.Heirarchy.RenderArgs" /> class.
            </summary>
            <param name="scene">The <see cref="!:JGL.Hierarchy.Scene" /> to be rendered in this window</param>
        </member>
        <member name="F:JGL.Graphics.RenderArgs.Trace">
            <summary>
            Tracing
            </summary>
        </member>
        <member name="F:JGL.Graphics.RenderArgs.CurrentLightName">
            <summary>
            The current GL light. When <see cref="M:JGL.Heirarchy.Light.Render(JGL.Graphics.RenderArgs)" /> is called, the method increments this value.
            </summary>
        </member>
        <member name="F:JGL.Graphics.RenderArgs.Entities">
            <summary>
            The stack of <see cref="!:JGL.Heirarchy.Context" />s as rendered so far
            </summary>
        </member>
        <member name="P:JGL.Graphics.RenderArgs.Scene">
            <summary>
            The <see cref="T:JGL.Heirarchy.Scene" /> for this <see cref="T:JGL.Graphics.SceneWindow" /> to render
            </summary>
        </member>
        <member name="P:JGL.Graphics.RenderArgs.Camera">
            <summary>
            The <see cref="T:JGL.Heirarchy.Scene" />'s currently active <see cref="T:JGL.Heirarchy.Camera" /> to use for rendering
            </summary>
        </member>
        <member name="P:JGL.Graphics.RenderArgs.CurrentEntity">
            <summary>
            Gets the current <see cref="T:JGL.Heirarchy.Entity" /> being operated on (e.g. being rendered in the case of <see cref="T:JGL.Graphics.RenderArgs" /></summary>
        </member>
        <member name="P:JGL.Graphics.RenderArgs.FrameTriangleCount">
            <summary>
            Number of triangles rendered in the previous frame - public field to be set by rendering algorithm
            </summary>
        </member>
        <member name="P:JGL.Graphics.RenderArgs.TriangleCount">
            <summary>
            The number of triangles in the last render cycle
            </summary>
        </member>
        <member name="P:JGL.Graphics.RenderArgs.FrameCount">
            <summary>
            The frame count.
            </summary>
        </member>
        <member name="P:JGL.Graphics.RenderArgs.TrianglesPerSecond">
            <summary>
            Average number of triangles drawn per second
            </summary>
        </member>
        <member name="P:JGL.Graphics.RenderArgs.TrianglesPerFrame">
            <summary>
            Average number of triangles per frame
            </summary>
        </member>
        <!--FIXME: Invalid documentation markup was found for member P:JGL.Graphics.RenderArgs.FramesPerSecond-->
        <member name="P:JGL.Graphics.RenderArgs.MarkTime">
            <summary>
            A marked time, usually when the event last occurred. To update this call <see cref="!:Mark" />.
            </summary>
        </member>
        <member name="P:JGL.Graphics.RenderArgs.TimeElapsed">
            <summary>
            Gets the time elapsed since <see cref="P:JGL.Graphics.RenderArgs.MarkTime" /></summary>
        </member>
        <member name="P:JGL.Graphics.RenderArgs.LastDuration">
            <summary>
            The <see cref="T:System.TimeSpan" /> between the two most recent consecutive events (ie when <see cref="!:Reset" /> is called(
            </summary>
        </member>
        <member name="M:JGL.Graphics.RenderArgs.Update">
            <summary>
            Override of <see cref="M:JGL.Graphics.RenderArgs.Update" /> updates frame counters etc, only calculates frame rate once per second at most
            </summary>
        </member>
        <member name="M:JGL.Graphics.RenderArgs.PrepareFrame">
            <summary>
            Reset the triangle count, record the timespan since the last mark time and mark it again
            </summary>s
            <remarks>This should get called before every rendering</remarks></member>
        <member name="T:JGL.Heirarchy.Behaviours.BatchBehaviour`1">
            <summary>
            An abstract type of <see cref="T:JGL.Heirarchy.Behaviours.Behaviour" /> that can control several <see cref="T:JGL.Heirarchy.Entity" />'s with one instance
            </summary>
            <remarks>
            Maybe in the very distant future you could find a way to implement this in a highly parallel fashion.
            Some ideas - SIMD instructions (can i even use those in C# tho), thread pools, task parallel library?
            </remarks>
        </member>
        <member name="T:JGL.Heirarchy.Behaviours.Behaviour">
            <summary>
            Provides functions that are called by an active <see cref="T:JGL.Heirarchy.Scene" /> to perform
            some implement some kind of temporal behaviour
            </summary>
            <remarks>
            Not sure yet whether I'm going to be implementing this in object/entity's or implementing it
            separately in some kind of processor/controller class. Maybe both
            </remarks>
        </member>
        <member name="F:JGL.Heirarchy.Behaviours.Gravity.NeutralAccelerationThreshold">
            <summary>
            If an <see cref="T:JGL.Heirarchy.Object" />'s Y acceleration component's magnitude is less than this,
            this behaviour will give it an initial acceleration using the GravityAcceleration property
            </summary>
        </member>
        <member name="F:JGL.Heirarchy.Behaviours.Gravity.GravityAcceleration">
            <summary>
            Acceleration due to gravity is 9.8 m/s (might not necessarily look good though, change if need be)
            </summary>
        </member>
    </members>
</doc>
